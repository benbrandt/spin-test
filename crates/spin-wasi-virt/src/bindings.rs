// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod cli {
        #[allow(dead_code, clippy::all)]
        pub mod stdout {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_stdout() -> OutputStream {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:cli/stdout@0.2.0")]
                    extern "C" {
                        #[link_name = "get-stdout"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    super::super::super::wasi::io::streams::OutputStream::from_handle(ret as u32)
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod terminal_input {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// The input side of a terminal.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct TerminalInput {
                handle: _rt::Resource<TerminalInput>,
            }

            impl TerminalInput {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for TerminalInput {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:cli/terminal-input@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]terminal-input"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod terminal_output {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// The output side of a terminal.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct TerminalOutput {
                handle: _rt::Resource<TerminalOutput>,
            }

            impl TerminalOutput {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for TerminalOutput {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:cli/terminal-output@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]terminal-output"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod terminal_stdin {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type TerminalInput = super::super::super::wasi::cli::terminal_input::TerminalInput;
            #[allow(unused_unsafe, clippy::all)]
            /// If stdin is connected to a terminal, return a `terminal-input` handle
            /// allowing further interaction with it.
            pub fn get_terminal_stdin() -> Option<TerminalInput> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:cli/terminal-stdin@0.2.0")]
                    extern "C" {
                        #[link_name = "get-terminal-stdin"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<i32>();

                                super::super::super::wasi::cli::terminal_input::TerminalInput::from_handle(l2 as u32)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod terminal_stdout {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type TerminalOutput =
                super::super::super::wasi::cli::terminal_output::TerminalOutput;
            #[allow(unused_unsafe, clippy::all)]
            /// If stdout is connected to a terminal, return a `terminal-output` handle
            /// allowing further interaction with it.
            pub fn get_terminal_stdout() -> Option<TerminalOutput> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:cli/terminal-stdout@0.2.0")]
                    extern "C" {
                        #[link_name = "get-terminal-stdout"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<i32>();

                                super::super::super::wasi::cli::terminal_output::TerminalOutput::from_handle(l2 as u32)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod terminal_stderr {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type TerminalOutput =
                super::super::super::wasi::cli::terminal_output::TerminalOutput;
            #[allow(unused_unsafe, clippy::all)]
            /// If stderr is connected to a terminal, return a `terminal-output` handle
            /// allowing further interaction with it.
            pub fn get_terminal_stderr() -> Option<TerminalOutput> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:cli/terminal-stderr@0.2.0")]
                    extern "C" {
                        #[link_name = "get-terminal-stderr"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<i32>();

                                super::super::super::wasi::cli::terminal_output::TerminalOutput::from_handle(l2 as u32)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod clocks {
        #[allow(dead_code, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "now"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// occured.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import(_: i64) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i64(when));
                    super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the given duration has
            /// elapsed, starting at the time at which this function was called.
            /// occured.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import(_: i64) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i64(when));
                    super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "now"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    Datetime {
                        seconds: l1 as u64,
                        nanoseconds: l2 as u32,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    Datetime {
                        seconds: l1 as u64,
                        nanoseconds: l2 as u32,
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod io {
        #[allow(dead_code, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` represents a single I/O event which may be ready, or not.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }

            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// If the list contains more elements than can be indexed with a `u32`
            /// value, this function traps.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being reaedy for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(vec0.len() * 4, 4);
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                    extern "C" {
                        #[link_name = "poll"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(result0, len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod error {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// A resource which represents some error information.
            ///
            /// The only method provided by this resource is `to-debug-string`,
            /// which provides some human-readable information about the error.
            ///
            /// In the `wasi:io` package, this resource is returned through the
            /// `wasi:io/streams/stream-error` type.
            ///
            /// To provide more specific error information, other interfaces may
            /// provide functions to further "downcast" this error into more specific
            /// error information. For example, `error`s returned in streams derived
            /// from filesystem types to be described using the filesystem's own
            /// error-code type, using the function
            /// `wasi:filesystem/types/filesystem-error-code`, which takes a parameter
            /// `borrow<error>` and returns
            /// `option<wasi:filesystem/types/error-code>`.
            ///
            /// The set of functions which can "downcast" an `error` into a more
            /// concrete type is open.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Error {
                handle: _rt::Resource<Error>,
            }

            impl Error {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Error {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/error@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]error"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Error {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns a string that is suitable to assist humans in debugging
                /// this error.
                ///
                /// WARNING: The returned string should not be consumed mechanically!
                /// It may change across platforms, hosts, or other implementation
                /// details. Parsing this string is a major platform-compatibility
                /// hazard.
                pub fn to_debug_string(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/error@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]error.to-debug-string"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod streams {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Error = super::super::super::wasi::io::error::Error;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An error for input-stream and output-stream operations.
            pub enum StreamError {
                /// The last operation (a write or flush) failed before completion.
                ///
                /// More information is available in the `error` payload.
                LastOperationFailed(Error),
                /// The stream is closed: no more input will be accepted by the
                /// stream. A closed output-stream will return this error on all
                /// future operations.
                Closed,
            }
            impl ::core::fmt::Debug for StreamError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        StreamError::LastOperationFailed(e) => f
                            .debug_tuple("StreamError::LastOperationFailed")
                            .field(e)
                            .finish(),
                        StreamError::Closed => f.debug_tuple("StreamError::Closed").finish(),
                    }
                }
            }
            impl ::core::fmt::Display for StreamError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for StreamError {}
            /// An input bytestream.
            ///
            /// `input-stream`s are *non-blocking* to the extent practical on underlying
            /// platforms. I/O operations always return promptly; if fewer bytes are
            /// promptly available than requested, they return the number of bytes promptly
            /// available, which could even be zero. To wait for data to be available,
            /// use the `subscribe` function to obtain a `pollable` which can be polled
            /// for using `wasi:io/poll`.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InputStream {
                handle: _rt::Resource<InputStream>,
            }

            impl InputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for InputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]input-stream"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// An output bytestream.
            ///
            /// `output-stream`s are *non-blocking* to the extent practical on
            /// underlying platforms. Except where specified otherwise, I/O operations also
            /// always return promptly, after the number of bytes that can be written
            /// promptly, which could even be zero. To wait for the stream to be ready to
            /// accept data, the `subscribe` function to obtain a `pollable` which can be
            /// polled for using `wasi:io/poll`.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutputStream {
                handle: _rt::Resource<OutputStream>,
            }

            impl OutputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for OutputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]output-stream"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Perform a non-blocking read from the stream.
                ///
                /// When the source of a `read` is binary data, the bytes from the source
                /// are returned verbatim. When the source of a `read` is known to the
                /// implementation to be text, bytes containing the UTF-8 encoding of the
                /// text are returned.
                ///
                /// This function returns a list of bytes containing the read data,
                /// when successful. The returned list will contain up to `len` bytes;
                /// it may return fewer than requested, but not more. The list is
                /// empty when no bytes are available for reading at this time. The
                /// pollable given by `subscribe` will be ready when more bytes are
                /// available.
                ///
                /// This function fails with a `stream-error` when the operation
                /// encounters an error, giving `last-operation-failed`, or when the
                /// stream is closed, giving `closed`.
                ///
                /// When the caller gives a `len` of 0, it represents a request to
                /// read 0 bytes. If the stream is still open, this call should
                /// succeed and return an empty list, or otherwise fail with `closed`.
                ///
                /// The `len` parameter is a `u64`, which could represent a list of u8 which
                /// is not possible to allocate in wasm32, or not desirable to allocate as
                /// as a return value by the callee. The callee may return a list of bytes
                /// less than `len` in size while more bytes are available for reading.
                pub fn read(&self, len: u64) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]input-stream.read"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;

                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v7 = match l5 {
                                        0 => {
                                            let e7 = {
                                                let l6 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l6 as u32)
                                            };
                                            StreamError::LastOperationFailed(e7)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v7
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Read bytes from a stream, after blocking until at least one byte can
                /// be read. Except for blocking, behavior is identical to `read`.
                pub fn blocking_read(&self, len: u64) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]input-stream.blocking-read"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;

                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v7 = match l5 {
                                        0 => {
                                            let e7 = {
                                                let l6 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l6 as u32)
                                            };
                                            StreamError::LastOperationFailed(e7)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v7
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Skip bytes from a stream. Returns number of bytes skipped.
                ///
                /// Behaves identical to `read`, except instead of returning a list
                /// of bytes, returns the number of bytes consumed from the stream.
                pub fn skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]input-stream.skip"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(12).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Skip bytes from a stream, after blocking until at least one byte
                /// can be skipped. Except for blocking behavior, identical to `skip`.
                pub fn blocking_skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]input-stream.blocking-skip"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(12).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a `pollable` which will resolve once either the specified stream
                /// has bytes available to read or the other end of the stream has been
                /// closed.
                /// The created `pollable` is a child resource of the `input-stream`.
                /// Implementations may trap if the `input-stream` is dropped before
                /// all derived `pollable`s created with this function are dropped.
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]input-stream.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Check readiness for writing. This function never blocks.
                ///
                /// Returns the number of bytes permitted for the next call to `write`,
                /// or an error. Calling `write` with more bytes than this function has
                /// permitted will trap.
                ///
                /// When this function returns 0 bytes, the `subscribe` pollable will
                /// become ready when this function will report at least 1 byte, or an
                /// error.
                pub fn check_write(&self) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.check-write"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(12).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Perform a write. This function never blocks.
                ///
                /// When the destination of a `write` is binary data, the bytes from
                /// `contents` are written verbatim. When the destination of a `write` is
                /// known to the implementation to be text, the bytes of `contents` are
                /// transcoded from UTF-8 into the encoding of the destination and then
                /// written.
                ///
                /// Precondition: check-write gave permit of Ok(n) and contents has a
                /// length of less than or equal to n. Otherwise, this function will trap.
                ///
                /// returns Err(closed) without writing if the stream has closed since
                /// the last call to check-write provided a permit.
                pub fn write(&self, contents: &[u8]) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.write"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr1.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Perform a write of up to 4096 bytes, and then flush the stream. Block
                /// until all of these operations are complete, or an error occurs.
                ///
                /// This is a convenience wrapper around the use of `check-write`,
                /// `subscribe`, `write`, and `flush`, and is implemented with the
                /// following pseudo-code:
                ///
                /// ```text
                /// let pollable = this.subscribe();
                /// while !contents.is_empty() {
                /// // Wait for the stream to become writable
                /// pollable.block();
                /// let Ok(n) = this.check-write(); // eliding error handling
                /// let len = min(n, contents.len());
                /// let (chunk, rest) = contents.split_at(len);
                /// this.write(chunk  );            // eliding error handling
                /// contents = rest;
                /// }
                /// this.flush();
                /// // Wait for completion of `flush`
                /// pollable.block();
                /// // Check for any errors that arose during `flush`
                /// let _ = this.check-write();         // eliding error handling
                /// ```
                pub fn blocking_write_and_flush(&self, contents: &[u8]) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-and-flush"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr1.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Request to flush buffered output. This function never blocks.
                ///
                /// This tells the output-stream that the caller intends any buffered
                /// output to be flushed. the output which is expected to be flushed
                /// is all that has been passed to `write` prior to this call.
                ///
                /// Upon calling this function, the `output-stream` will not accept any
                /// writes (`check-write` will return `ok(0)`) until the flush has
                /// completed. The `subscribe` pollable will become ready when the
                /// flush has completed and the stream can accept more writes.
                pub fn flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.flush"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v4 = match l2 {
                                        0 => {
                                            let e4 = {
                                                let l3 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                                            };
                                            StreamError::LastOperationFailed(e4)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v4
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Request to flush buffered output, and block until flush completes
                /// and stream is ready for writing again.
                pub fn blocking_flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.blocking-flush"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v4 = match l2 {
                                        0 => {
                                            let e4 = {
                                                let l3 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                                            };
                                            StreamError::LastOperationFailed(e4)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v4
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a `pollable` which will resolve once the output-stream
                /// is ready for more writing, or an error has occured. When this
                /// pollable is ready, `check-write` will return `ok(n)` with n>0, or an
                /// error.
                ///
                /// If the stream is closed, this pollable is always ready immediately.
                ///
                /// The created `pollable` is a child resource of the `output-stream`.
                /// Implementations may trap if the `output-stream` is dropped before
                /// all derived `pollable`s created with this function are dropped.
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Write zeroes to a stream.
                ///
                /// This should be used precisely like `write` with the exact same
                /// preconditions (must use check-write first), but instead of
                /// passing a list of bytes, you simply pass the number of zero-bytes
                /// that should be written.
                pub fn write_zeroes(&self, len: u64) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.write-zeroes"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v4 = match l2 {
                                        0 => {
                                            let e4 = {
                                                let l3 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                                            };
                                            StreamError::LastOperationFailed(e4)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v4
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Perform a write of up to 4096 zeroes, and then flush the stream.
                /// Block until all of these operations are complete, or an error
                /// occurs.
                ///
                /// This is a convenience wrapper around the use of `check-write`,
                /// `subscribe`, `write-zeroes`, and `flush`, and is implemented with
                /// the following pseudo-code:
                ///
                /// ```text
                /// let pollable = this.subscribe();
                /// while num_zeroes != 0 {
                /// // Wait for the stream to become writable
                /// pollable.block();
                /// let Ok(n) = this.check-write(); // eliding error handling
                /// let len = min(n, num_zeroes);
                /// this.write-zeroes(len);         // eliding error handling
                /// num_zeroes -= len;
                /// }
                /// this.flush();
                /// // Wait for completion of `flush`
                /// pollable.block();
                /// // Check for any errors that arose during `flush`
                /// let _ = this.check-write();         // eliding error handling
                /// ```
                pub fn blocking_write_zeroes_and_flush(&self, len: u64) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-zeroes-and-flush"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v4 = match l2 {
                                        0 => {
                                            let e4 = {
                                                let l3 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                                            };
                                            StreamError::LastOperationFailed(e4)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v4
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Read from one stream and write to another.
                ///
                /// The behavior of splice is equivelant to:
                /// 1. calling `check-write` on the `output-stream`
                /// 2. calling `read` on the `input-stream` with the smaller of the
                /// `check-write` permitted length and the `len` provided to `splice`
                /// 3. calling `write` on the `output-stream` with that read data.
                ///
                /// Any error reported by the call to `check-write`, `read`, or
                /// `write` ends the splice and reports that error.
                ///
                /// This function returns the number of bytes transferred; it may be less
                /// than `len`.
                pub fn splice(&self, src: &InputStream, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.splice"]
                            fn wit_import(_: i32, _: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (src).handle() as i32,
                            _rt::as_i64(&len),
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(12).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Read from one stream and write to another, with blocking.
                ///
                /// This is similar to `splice`, except that it blocks until the
                /// `output-stream` is ready for writing, and the `input-stream`
                /// is ready for reading, before performing the `splice`.
                pub fn blocking_splice(
                    &self,
                    src: &InputStream,
                    len: u64,
                ) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.blocking-splice"]
                            fn wit_import(_: i32, _: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (src).handle() as i32,
                            _rt::as_i64(&len),
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(12).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod random {
        #[allow(dead_code, clippy::all)]
        pub mod random {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// Return `len` cryptographically-secure random or pseudo-random bytes.
            ///
            /// This function must produce data at least as cryptographically secure and
            /// fast as an adequately seeded cryptographically-secure pseudo-random
            /// number generator (CSPRNG). It must not block, from the perspective of
            /// the calling program, under any circumstances, including on the first
            /// request and on requests for numbers of bytes. The returned data must
            /// always be unpredictable.
            ///
            /// This function must always return fresh data. Deterministic environments
            /// must omit this function, rather than implementing it with deterministic
            /// data.
            pub fn get_random_bytes(len: u64) -> _rt::Vec<u8> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:random/random@0.2.0")]
                    extern "C" {
                        #[link_name = "get-random-bytes"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&len), ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let len3 = l2;
                    _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Return a cryptographically-secure random or pseudo-random `u64` value.
            ///
            /// This function returns the same type of data as `get-random-bytes`,
            /// represented as a `u64`.
            pub fn get_random_u64() -> u64 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:random/random@0.2.0")]
                    extern "C" {
                        #[link_name = "get-random-u64"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod insecure {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// Return `len` insecure pseudo-random bytes.
            ///
            /// This function is not cryptographically secure. Do not use it for
            /// anything related to security.
            ///
            /// There are no requirements on the values of the returned bytes, however
            /// implementations are encouraged to return evenly distributed values with
            /// a long period.
            pub fn get_insecure_random_bytes(len: u64) -> _rt::Vec<u8> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:random/insecure@0.2.0")]
                    extern "C" {
                        #[link_name = "get-insecure-random-bytes"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&len), ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let len3 = l2;
                    _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Return an insecure pseudo-random `u64` value.
            ///
            /// This function returns the same type of pseudo-random data as
            /// `get-insecure-random-bytes`, represented as a `u64`.
            pub fn get_insecure_random_u64() -> u64 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:random/insecure@0.2.0")]
                    extern "C" {
                        #[link_name = "get-insecure-random-u64"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod insecure_seed {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            #[allow(unused_unsafe, clippy::all)]
            /// Return a 128-bit value that may contain a pseudo-random value.
            ///
            /// The returned value is not required to be computed from a CSPRNG, and may
            /// even be entirely deterministic. Host implementations are encouraged to
            /// provide pseudo-random values to any program exposed to
            /// attacker-controlled content, to enable DoS protection built into many
            /// languages' hash-map implementations.
            ///
            /// This function is intended to only be called once, by a source language
            /// to initialize Denial Of Service (DoS) protection in its hash-map
            /// implementation.
            ///
            /// # Expected future evolution
            ///
            /// This will likely be changed to a value import, to prevent it from being
            /// called multiple times and potentially used for purposes other than DoS
            /// protection.
            pub fn insecure_seed() -> (u64, u64) {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:random/insecure-seed@0.2.0")]
                    extern "C" {
                        #[link_name = "insecure-seed"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    (l1 as u64, l2 as u64)
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod wasi {
        #[allow(dead_code)]
        pub mod cli {
            #[allow(dead_code, clippy::all)]
            pub mod environment {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_environment_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_environment();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec5 = result0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 16, 4);
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5.add(i * 16);
                        {
                            let (t2_0, t2_1) = e;
                            let vec3 = (t2_0.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (t2_1.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base.add(12).cast::<usize>() = len4;
                            *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len5;
                    *ptr1.add(0).cast::<*mut u8>() = result5;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_environment<T: Guest>(arg0: *mut u8) {
                    let l4 = *arg0.add(0).cast::<*mut u8>();
                    let l5 = *arg0.add(4).cast::<usize>();
                    let base6 = l4;
                    let len6 = l5;
                    for i in 0..len6 {
                        let base = base6.add(i * 16);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                            let l2 = *base.add(8).cast::<*mut u8>();
                            let l3 = *base.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(base6, len6 * 16, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_arguments_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_arguments();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 8, 4);
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3.add(i * 8);
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_arguments<T: Guest>(arg0: *mut u8) {
                    let l2 = *arg0.add(0).cast::<*mut u8>();
                    let l3 = *arg0.add(4).cast::<usize>();
                    let base4 = l2;
                    let len4 = l3;
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                        }
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initial_cwd_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::initial_cwd();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1.add(8).cast::<usize>() = len2;
                            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initial_cwd<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// Get the POSIX-style environment variables.
                    ///
                    /// Each environment variable is provided as a pair of string variable names
                    /// and string value.
                    ///
                    /// Morally, these are a value import, but until value imports are available
                    /// in the component model, this import function should return the same
                    /// values each time it is called.
                    fn get_environment() -> _rt::Vec<(_rt::String, _rt::String)>;
                    /// Get the POSIX-style arguments to the program.
                    fn get_arguments() -> _rt::Vec<_rt::String>;
                    /// Return a path that programs should use as their initial current working
                    /// directory, interpreting `.` as shorthand for this.
                    fn initial_cwd() -> Option<_rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_cli_environment_0_2_0_cabi{
    ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

      #[export_name = "wasi:cli/environment@0.2.0#get-environment"]
      unsafe extern "C" fn export_get_environment() -> *mut u8 {
        $($path_to_types)*::_export_get_environment_cabi::<$ty>()
      }
      #[export_name = "cabi_post_wasi:cli/environment@0.2.0#get-environment"]
      unsafe extern "C" fn _post_return_get_environment(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_get_environment::<$ty>(arg0)
      }
      #[export_name = "wasi:cli/environment@0.2.0#get-arguments"]
      unsafe extern "C" fn export_get_arguments() -> *mut u8 {
        $($path_to_types)*::_export_get_arguments_cabi::<$ty>()
      }
      #[export_name = "cabi_post_wasi:cli/environment@0.2.0#get-arguments"]
      unsafe extern "C" fn _post_return_get_arguments(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_get_arguments::<$ty>(arg0)
      }
      #[export_name = "wasi:cli/environment@0.2.0#initial-cwd"]
      unsafe extern "C" fn export_initial_cwd() -> *mut u8 {
        $($path_to_types)*::_export_initial_cwd_cabi::<$ty>()
      }
      #[export_name = "cabi_post_wasi:cli/environment@0.2.0#initial-cwd"]
      unsafe extern "C" fn _post_return_initial_cwd(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_initial_cwd::<$ty>(arg0)
      }
    };);
  }
                #[doc(hidden)]
                pub(crate) use __export_wasi_cli_environment_0_2_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod exit {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_exit_cabi<T: Guest>(arg0: i32) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    T::exit(match arg0 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = ();
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    });
                }
                pub trait Guest {
                    /// Exit the current instance and any linked instances.
                    fn exit(status: Result<(), ()>);
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_cli_exit_0_2_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "wasi:cli/exit@0.2.0#exit"]
    unsafe extern "C" fn export_exit(arg0: i32,) {
      $($path_to_types)*::_export_exit_cabi::<$ty>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_wasi_cli_exit_0_2_0_cabi;
            }
        }
        #[allow(dead_code)]
        pub mod filesystem {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type InputStream = super::super::super::super::wasi::io::streams::InputStream;
                pub type OutputStream = super::super::super::super::wasi::io::streams::OutputStream;
                pub type Error = super::super::super::super::wasi::io::streams::Error;
                pub type Datetime = super::super::super::super::wasi::clocks::wall_clock::Datetime;
                /// File size or length of a region within a file.
                pub type Filesize = u64;
                /// The type of a filesystem object referenced by a descriptor.
                ///
                /// Note: This was called `filetype` in earlier versions of WASI.
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum DescriptorType {
                    /// The type of the descriptor or file is unknown or is different from
                    /// any of the other types specified.
                    Unknown,
                    /// The descriptor refers to a block device inode.
                    BlockDevice,
                    /// The descriptor refers to a character device inode.
                    CharacterDevice,
                    /// The descriptor refers to a directory inode.
                    Directory,
                    /// The descriptor refers to a named pipe.
                    Fifo,
                    /// The file refers to a symbolic link inode.
                    SymbolicLink,
                    /// The descriptor refers to a regular file inode.
                    RegularFile,
                    /// The descriptor refers to a socket.
                    Socket,
                }
                impl ::core::fmt::Debug for DescriptorType {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            DescriptorType::Unknown => {
                                f.debug_tuple("DescriptorType::Unknown").finish()
                            }
                            DescriptorType::BlockDevice => {
                                f.debug_tuple("DescriptorType::BlockDevice").finish()
                            }
                            DescriptorType::CharacterDevice => {
                                f.debug_tuple("DescriptorType::CharacterDevice").finish()
                            }
                            DescriptorType::Directory => {
                                f.debug_tuple("DescriptorType::Directory").finish()
                            }
                            DescriptorType::Fifo => f.debug_tuple("DescriptorType::Fifo").finish(),
                            DescriptorType::SymbolicLink => {
                                f.debug_tuple("DescriptorType::SymbolicLink").finish()
                            }
                            DescriptorType::RegularFile => {
                                f.debug_tuple("DescriptorType::RegularFile").finish()
                            }
                            DescriptorType::Socket => {
                                f.debug_tuple("DescriptorType::Socket").finish()
                            }
                        }
                    }
                }

                impl DescriptorType {
                    pub(crate) unsafe fn _lift(val: u8) -> DescriptorType {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => DescriptorType::Unknown,
                            1 => DescriptorType::BlockDevice,
                            2 => DescriptorType::CharacterDevice,
                            3 => DescriptorType::Directory,
                            4 => DescriptorType::Fifo,
                            5 => DescriptorType::SymbolicLink,
                            6 => DescriptorType::RegularFile,
                            7 => DescriptorType::Socket,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                wit_bindgen_rt::bitflags::bitflags! {
                  /// Descriptor flags.
                  ///
                  /// Note: This was called `fdflags` in earlier versions of WASI.
                  #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
                  pub struct DescriptorFlags: u8 {
                    /// Read mode: Data can be read.
                    const READ = 1 << 0;
                    /// Write mode: Data can be written to.
                    const WRITE = 1 << 1;
                    /// Request that writes be performed according to synchronized I/O file
                    /// integrity completion. The data stored in the file and the file's
                    /// metadata are synchronized. This is similar to `O_SYNC` in POSIX.
                    ///
                    /// The precise semantics of this operation have not yet been defined for
                    /// WASI. At this time, it should be interpreted as a request, and not a
                    /// requirement.
                    const FILE_INTEGRITY_SYNC = 1 << 2;
                    /// Request that writes be performed according to synchronized I/O data
                    /// integrity completion. Only the data stored in the file is
                    /// synchronized. This is similar to `O_DSYNC` in POSIX.
                    ///
                    /// The precise semantics of this operation have not yet been defined for
                    /// WASI. At this time, it should be interpreted as a request, and not a
                    /// requirement.
                    const DATA_INTEGRITY_SYNC = 1 << 3;
                    /// Requests that reads be performed at the same level of integrety
                    /// requested for writes. This is similar to `O_RSYNC` in POSIX.
                    ///
                    /// The precise semantics of this operation have not yet been defined for
                    /// WASI. At this time, it should be interpreted as a request, and not a
                    /// requirement.
                    const REQUESTED_WRITE_SYNC = 1 << 4;
                    /// Mutating directories mode: Directory contents may be mutated.
                    ///
                    /// When this flag is unset on a descriptor, operations using the
                    /// descriptor which would create, rename, delete, modify the data or
                    /// metadata of filesystem objects, or obtain another handle which
                    /// would permit any of those, shall fail with `error-code::read-only` if
                    /// they would otherwise succeed.
                    ///
                    /// This may only be set on directories.
                    const MUTATE_DIRECTORY = 1 << 5;
                  }
                }
                wit_bindgen_rt::bitflags::bitflags! {
                  /// Flags determining the method of how paths are resolved.
                  #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
                  pub struct PathFlags: u8 {
                    /// As long as the resolved path corresponds to a symbolic link, it is
                    /// expanded.
                    const SYMLINK_FOLLOW = 1 << 0;
                  }
                }
                wit_bindgen_rt::bitflags::bitflags! {
                  /// Open flags used by `open-at`.
                  #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
                  pub struct OpenFlags: u8 {
                    /// Create file if it does not exist, similar to `O_CREAT` in POSIX.
                    const CREATE = 1 << 0;
                    /// Fail if not a directory, similar to `O_DIRECTORY` in POSIX.
                    const DIRECTORY = 1 << 1;
                    /// Fail if file already exists, similar to `O_EXCL` in POSIX.
                    const EXCLUSIVE = 1 << 2;
                    /// Truncate file to size 0, similar to `O_TRUNC` in POSIX.
                    const TRUNCATE = 1 << 3;
                  }
                }
                /// Number of hard links to an inode.
                pub type LinkCount = u64;
                /// File attributes.
                ///
                /// Note: This was called `filestat` in earlier versions of WASI.
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct DescriptorStat {
                    /// File type.
                    pub type_: DescriptorType,
                    /// Number of hard links to the file.
                    pub link_count: LinkCount,
                    /// For regular files, the file size in bytes. For symbolic links, the
                    /// length in bytes of the pathname contained in the symbolic link.
                    pub size: Filesize,
                    /// Last data access timestamp.
                    ///
                    /// If the `option` is none, the platform doesn't maintain an access
                    /// timestamp for this file.
                    pub data_access_timestamp: Option<Datetime>,
                    /// Last data modification timestamp.
                    ///
                    /// If the `option` is none, the platform doesn't maintain a
                    /// modification timestamp for this file.
                    pub data_modification_timestamp: Option<Datetime>,
                    /// Last file status-change timestamp.
                    ///
                    /// If the `option` is none, the platform doesn't maintain a
                    /// status-change timestamp for this file.
                    pub status_change_timestamp: Option<Datetime>,
                }
                impl ::core::fmt::Debug for DescriptorStat {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("DescriptorStat")
                            .field("type", &self.type_)
                            .field("link-count", &self.link_count)
                            .field("size", &self.size)
                            .field("data-access-timestamp", &self.data_access_timestamp)
                            .field(
                                "data-modification-timestamp",
                                &self.data_modification_timestamp,
                            )
                            .field("status-change-timestamp", &self.status_change_timestamp)
                            .finish()
                    }
                }
                /// When setting a timestamp, this gives the value to set it to.
                #[derive(Clone, Copy)]
                pub enum NewTimestamp {
                    /// Leave the timestamp set to its previous value.
                    NoChange,
                    /// Set the timestamp to the current time of the system clock associated
                    /// with the filesystem.
                    Now,
                    /// Set the timestamp to the given value.
                    Timestamp(Datetime),
                }
                impl ::core::fmt::Debug for NewTimestamp {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            NewTimestamp::NoChange => {
                                f.debug_tuple("NewTimestamp::NoChange").finish()
                            }
                            NewTimestamp::Now => f.debug_tuple("NewTimestamp::Now").finish(),
                            NewTimestamp::Timestamp(e) => {
                                f.debug_tuple("NewTimestamp::Timestamp").field(e).finish()
                            }
                        }
                    }
                }
                /// A directory entry.
                #[derive(Clone)]
                pub struct DirectoryEntry {
                    /// The type of the file referred to by this directory entry.
                    pub type_: DescriptorType,
                    /// The name of the object.
                    pub name: _rt::String,
                }
                impl ::core::fmt::Debug for DirectoryEntry {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("DirectoryEntry")
                            .field("type", &self.type_)
                            .field("name", &self.name)
                            .finish()
                    }
                }
                /// Error codes returned by functions, similar to `errno` in POSIX.
                /// Not all of these error codes are returned by the functions provided by this
                /// API; some are used in higher-level library layers, and others are provided
                /// merely for alignment with POSIX.
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum ErrorCode {
                    /// Permission denied, similar to `EACCES` in POSIX.
                    Access,
                    /// Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.
                    WouldBlock,
                    /// Connection already in progress, similar to `EALREADY` in POSIX.
                    Already,
                    /// Bad descriptor, similar to `EBADF` in POSIX.
                    BadDescriptor,
                    /// Device or resource busy, similar to `EBUSY` in POSIX.
                    Busy,
                    /// Resource deadlock would occur, similar to `EDEADLK` in POSIX.
                    Deadlock,
                    /// Storage quota exceeded, similar to `EDQUOT` in POSIX.
                    Quota,
                    /// File exists, similar to `EEXIST` in POSIX.
                    Exist,
                    /// File too large, similar to `EFBIG` in POSIX.
                    FileTooLarge,
                    /// Illegal byte sequence, similar to `EILSEQ` in POSIX.
                    IllegalByteSequence,
                    /// Operation in progress, similar to `EINPROGRESS` in POSIX.
                    InProgress,
                    /// Interrupted function, similar to `EINTR` in POSIX.
                    Interrupted,
                    /// Invalid argument, similar to `EINVAL` in POSIX.
                    Invalid,
                    /// I/O error, similar to `EIO` in POSIX.
                    Io,
                    /// Is a directory, similar to `EISDIR` in POSIX.
                    IsDirectory,
                    /// Too many levels of symbolic links, similar to `ELOOP` in POSIX.
                    Loop,
                    /// Too many links, similar to `EMLINK` in POSIX.
                    TooManyLinks,
                    /// Message too large, similar to `EMSGSIZE` in POSIX.
                    MessageSize,
                    /// Filename too long, similar to `ENAMETOOLONG` in POSIX.
                    NameTooLong,
                    /// No such device, similar to `ENODEV` in POSIX.
                    NoDevice,
                    /// No such file or directory, similar to `ENOENT` in POSIX.
                    NoEntry,
                    /// No locks available, similar to `ENOLCK` in POSIX.
                    NoLock,
                    /// Not enough space, similar to `ENOMEM` in POSIX.
                    InsufficientMemory,
                    /// No space left on device, similar to `ENOSPC` in POSIX.
                    InsufficientSpace,
                    /// Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.
                    NotDirectory,
                    /// Directory not empty, similar to `ENOTEMPTY` in POSIX.
                    NotEmpty,
                    /// State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.
                    NotRecoverable,
                    /// Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.
                    Unsupported,
                    /// Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.
                    NoTty,
                    /// No such device or address, similar to `ENXIO` in POSIX.
                    NoSuchDevice,
                    /// Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.
                    Overflow,
                    /// Operation not permitted, similar to `EPERM` in POSIX.
                    NotPermitted,
                    /// Broken pipe, similar to `EPIPE` in POSIX.
                    Pipe,
                    /// Read-only file system, similar to `EROFS` in POSIX.
                    ReadOnly,
                    /// Invalid seek, similar to `ESPIPE` in POSIX.
                    InvalidSeek,
                    /// Text file busy, similar to `ETXTBSY` in POSIX.
                    TextFileBusy,
                    /// Cross-device link, similar to `EXDEV` in POSIX.
                    CrossDevice,
                }
                impl ErrorCode {
                    pub fn name(&self) -> &'static str {
                        match self {
                            ErrorCode::Access => "access",
                            ErrorCode::WouldBlock => "would-block",
                            ErrorCode::Already => "already",
                            ErrorCode::BadDescriptor => "bad-descriptor",
                            ErrorCode::Busy => "busy",
                            ErrorCode::Deadlock => "deadlock",
                            ErrorCode::Quota => "quota",
                            ErrorCode::Exist => "exist",
                            ErrorCode::FileTooLarge => "file-too-large",
                            ErrorCode::IllegalByteSequence => "illegal-byte-sequence",
                            ErrorCode::InProgress => "in-progress",
                            ErrorCode::Interrupted => "interrupted",
                            ErrorCode::Invalid => "invalid",
                            ErrorCode::Io => "io",
                            ErrorCode::IsDirectory => "is-directory",
                            ErrorCode::Loop => "loop",
                            ErrorCode::TooManyLinks => "too-many-links",
                            ErrorCode::MessageSize => "message-size",
                            ErrorCode::NameTooLong => "name-too-long",
                            ErrorCode::NoDevice => "no-device",
                            ErrorCode::NoEntry => "no-entry",
                            ErrorCode::NoLock => "no-lock",
                            ErrorCode::InsufficientMemory => "insufficient-memory",
                            ErrorCode::InsufficientSpace => "insufficient-space",
                            ErrorCode::NotDirectory => "not-directory",
                            ErrorCode::NotEmpty => "not-empty",
                            ErrorCode::NotRecoverable => "not-recoverable",
                            ErrorCode::Unsupported => "unsupported",
                            ErrorCode::NoTty => "no-tty",
                            ErrorCode::NoSuchDevice => "no-such-device",
                            ErrorCode::Overflow => "overflow",
                            ErrorCode::NotPermitted => "not-permitted",
                            ErrorCode::Pipe => "pipe",
                            ErrorCode::ReadOnly => "read-only",
                            ErrorCode::InvalidSeek => "invalid-seek",
                            ErrorCode::TextFileBusy => "text-file-busy",
                            ErrorCode::CrossDevice => "cross-device",
                        }
                    }
                    pub fn message(&self) -> &'static str {
                        match self {
          ErrorCode::Access => "Permission denied, similar to `EACCES` in POSIX.",
          ErrorCode::WouldBlock => "Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.",
          ErrorCode::Already => "Connection already in progress, similar to `EALREADY` in POSIX.",
          ErrorCode::BadDescriptor => "Bad descriptor, similar to `EBADF` in POSIX.",
          ErrorCode::Busy => "Device or resource busy, similar to `EBUSY` in POSIX.",
          ErrorCode::Deadlock => "Resource deadlock would occur, similar to `EDEADLK` in POSIX.",
          ErrorCode::Quota => "Storage quota exceeded, similar to `EDQUOT` in POSIX.",
          ErrorCode::Exist => "File exists, similar to `EEXIST` in POSIX.",
          ErrorCode::FileTooLarge => "File too large, similar to `EFBIG` in POSIX.",
          ErrorCode::IllegalByteSequence => "Illegal byte sequence, similar to `EILSEQ` in POSIX.",
          ErrorCode::InProgress => "Operation in progress, similar to `EINPROGRESS` in POSIX.",
          ErrorCode::Interrupted => "Interrupted function, similar to `EINTR` in POSIX.",
          ErrorCode::Invalid => "Invalid argument, similar to `EINVAL` in POSIX.",
          ErrorCode::Io => "I/O error, similar to `EIO` in POSIX.",
          ErrorCode::IsDirectory => "Is a directory, similar to `EISDIR` in POSIX.",
          ErrorCode::Loop => "Too many levels of symbolic links, similar to `ELOOP` in POSIX.",
          ErrorCode::TooManyLinks => "Too many links, similar to `EMLINK` in POSIX.",
          ErrorCode::MessageSize => "Message too large, similar to `EMSGSIZE` in POSIX.",
          ErrorCode::NameTooLong => "Filename too long, similar to `ENAMETOOLONG` in POSIX.",
          ErrorCode::NoDevice => "No such device, similar to `ENODEV` in POSIX.",
          ErrorCode::NoEntry => "No such file or directory, similar to `ENOENT` in POSIX.",
          ErrorCode::NoLock => "No locks available, similar to `ENOLCK` in POSIX.",
          ErrorCode::InsufficientMemory => "Not enough space, similar to `ENOMEM` in POSIX.",
          ErrorCode::InsufficientSpace => "No space left on device, similar to `ENOSPC` in POSIX.",
          ErrorCode::NotDirectory => "Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.",
          ErrorCode::NotEmpty => "Directory not empty, similar to `ENOTEMPTY` in POSIX.",
          ErrorCode::NotRecoverable => "State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.",
          ErrorCode::Unsupported => "Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.",
          ErrorCode::NoTty => "Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.",
          ErrorCode::NoSuchDevice => "No such device or address, similar to `ENXIO` in POSIX.",
          ErrorCode::Overflow => "Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.",
          ErrorCode::NotPermitted => "Operation not permitted, similar to `EPERM` in POSIX.",
          ErrorCode::Pipe => "Broken pipe, similar to `EPIPE` in POSIX.",
          ErrorCode::ReadOnly => "Read-only file system, similar to `EROFS` in POSIX.",
          ErrorCode::InvalidSeek => "Invalid seek, similar to `ESPIPE` in POSIX.",
          ErrorCode::TextFileBusy => "Text file busy, similar to `ETXTBSY` in POSIX.",
          ErrorCode::CrossDevice => "Cross-device link, similar to `EXDEV` in POSIX.",
        }
                    }
                }
                impl ::core::fmt::Debug for ErrorCode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ErrorCode")
                            .field("code", &(*self as i32))
                            .field("name", &self.name())
                            .field("message", &self.message())
                            .finish()
                    }
                }
                impl ::core::fmt::Display for ErrorCode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{} (error {})", self.name(), *self as i32)
                    }
                }

                impl std::error::Error for ErrorCode {}

                impl ErrorCode {
                    pub(crate) unsafe fn _lift(val: u8) -> ErrorCode {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                /// File or memory access pattern advisory information.
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum Advice {
                    /// The application has no advice to give on its behavior with respect
                    /// to the specified data.
                    Normal,
                    /// The application expects to access the specified data sequentially
                    /// from lower offsets to higher offsets.
                    Sequential,
                    /// The application expects to access the specified data in a random
                    /// order.
                    Random,
                    /// The application expects to access the specified data in the near
                    /// future.
                    WillNeed,
                    /// The application expects that it will not access the specified data
                    /// in the near future.
                    DontNeed,
                    /// The application expects to access the specified data once and then
                    /// not reuse it thereafter.
                    NoReuse,
                }
                impl ::core::fmt::Debug for Advice {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Advice::Normal => f.debug_tuple("Advice::Normal").finish(),
                            Advice::Sequential => f.debug_tuple("Advice::Sequential").finish(),
                            Advice::Random => f.debug_tuple("Advice::Random").finish(),
                            Advice::WillNeed => f.debug_tuple("Advice::WillNeed").finish(),
                            Advice::DontNeed => f.debug_tuple("Advice::DontNeed").finish(),
                            Advice::NoReuse => f.debug_tuple("Advice::NoReuse").finish(),
                        }
                    }
                }

                impl Advice {
                    pub(crate) unsafe fn _lift(val: u8) -> Advice {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => Advice::Normal,
                            1 => Advice::Sequential,
                            2 => Advice::Random,
                            3 => Advice::WillNeed,
                            4 => Advice::DontNeed,
                            5 => Advice::NoReuse,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                /// A 128-bit hash value, split into parts because wasm doesn't have a
                /// 128-bit integer type.
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct MetadataHashValue {
                    /// 64 bits of a 128-bit hash value.
                    pub lower: u64,
                    /// Another 64 bits of a 128-bit hash value.
                    pub upper: u64,
                }
                impl ::core::fmt::Debug for MetadataHashValue {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("MetadataHashValue")
                            .field("lower", &self.lower)
                            .field("upper", &self.upper)
                            .finish()
                    }
                }
                /// A descriptor is a reference to a filesystem object, which may be a file,
                /// directory, named pipe, special file, or other object on which filesystem
                /// calls may be made.

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Descriptor {
                    handle: _rt::Resource<Descriptor>,
                }

                type _DescriptorRep<T> = Option<T>;

                impl Descriptor {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Descriptor`.
                    pub fn new<T: GuestDescriptor>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _DescriptorRep<T> = Some(val);
                        let ptr: *mut _DescriptorRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestDescriptor>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestDescriptor>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestDescriptor>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestDescriptor` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _DescriptorRep<T>);
                    }

                    fn as_ptr<T: GuestDescriptor>(&self) -> *mut _DescriptorRep<T> {
                        Descriptor::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Descriptor`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct DescriptorBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Descriptor>,
                }

                impl<'a> DescriptorBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestDescriptor>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _DescriptorRep<T> {
                        Descriptor::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Descriptor {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:filesystem/types@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]descriptor"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                /// A stream of directory entries.

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct DirectoryEntryStream {
                    handle: _rt::Resource<DirectoryEntryStream>,
                }

                type _DirectoryEntryStreamRep<T> = Option<T>;

                impl DirectoryEntryStream {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `DirectoryEntryStream`.
                    pub fn new<T: GuestDirectoryEntryStream>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _DirectoryEntryStreamRep<T> = Some(val);
                        let ptr: *mut _DirectoryEntryStreamRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestDirectoryEntryStream>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestDirectoryEntryStream>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestDirectoryEntryStream>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestDirectoryEntryStream` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _DirectoryEntryStreamRep<T>);
                    }

                    fn as_ptr<T: GuestDirectoryEntryStream>(
                        &self,
                    ) -> *mut _DirectoryEntryStreamRep<T> {
                        DirectoryEntryStream::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`DirectoryEntryStream`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct DirectoryEntryStreamBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a DirectoryEntryStream>,
                }

                impl<'a> DirectoryEntryStreamBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestDirectoryEntryStream>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _DirectoryEntryStreamRep<T> {
                        DirectoryEntryStream::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for DirectoryEntryStream {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:filesystem/types@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]directory-entry-stream"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_read_via_stream_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::read_via_stream(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_write_via_stream_cabi<
                    T: GuestDescriptor,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::write_via_stream(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_append_via_stream_cabi<
                    T: GuestDescriptor,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::append_via_stream(DescriptorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_advise_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: i64,
                    arg2: i64,
                    arg3: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::advise(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                        arg2 as u64,
                        Advice::_lift(arg3 as u8),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_sync_data_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::sync_data(DescriptorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_get_flags_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_flags(DescriptorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let flags2 = e;
                            *ptr1.add(1).cast::<u8>() = ((flags2.bits() >> 0) as i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_get_type_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_type(DescriptorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_set_size_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_size(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_set_times_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i64,
                    arg3: i32,
                    arg4: i32,
                    arg5: i64,
                    arg6: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v0 = match arg1 {
                        0 => NewTimestamp::NoChange,
                        1 => NewTimestamp::Now,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            let e0 =
                                super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                    seconds: arg2 as u64,
                                    nanoseconds: arg3 as u32,
                                };
                            NewTimestamp::Timestamp(e0)
                        }
                    };
                    let v1 = match arg4 {
                        0 => NewTimestamp::NoChange,
                        1 => NewTimestamp::Now,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            let e1 =
                                super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                    seconds: arg5 as u64,
                                    nanoseconds: arg6 as u32,
                                };
                            NewTimestamp::Timestamp(e1)
                        }
                    };
                    let result2 =
                        T::set_times(DescriptorBorrow::lift(arg0 as u32 as usize).get(), v0, v1);
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(_) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr3.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_read_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: i64,
                    arg2: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::read(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                        arg2 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let (t2_0, t2_1) = e;
                            let vec3 = (t2_0).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1.add(8).cast::<usize>() = len3;
                            *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                            *ptr1.add(12).cast::<u8>() = (match t2_1 {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_descriptor_read<T: GuestDescriptor>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => (),
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_write_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let result1 = T::write(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                        arg3 as u64,
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_read_directory_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::read_directory(DescriptorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_sync_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::sync(DescriptorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_create_directory_at_cabi<
                    T: GuestDescriptor,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::create_directory_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_stat_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::stat(DescriptorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let DescriptorStat {
                                type_: type_2,
                                link_count: link_count2,
                                size: size2,
                                data_access_timestamp: data_access_timestamp2,
                                data_modification_timestamp: data_modification_timestamp2,
                                status_change_timestamp: status_change_timestamp2,
                            } = e;
                            *ptr1.add(8).cast::<u8>() = (type_2.clone() as i32) as u8;
                            *ptr1.add(16).cast::<i64>() = _rt::as_i64(link_count2);
                            *ptr1.add(24).cast::<i64>() = _rt::as_i64(size2);
                            match data_access_timestamp2 {
                                Some(e) => {
                                    *ptr1.add(32).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasi::clocks::wall_clock::Datetime{ seconds:seconds3, nanoseconds:nanoseconds3, } = e;
                                    *ptr1.add(40).cast::<i64>() = _rt::as_i64(seconds3);
                                    *ptr1.add(48).cast::<i32>() = _rt::as_i32(nanoseconds3);
                                }
                                None => {
                                    *ptr1.add(32).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match data_modification_timestamp2 {
                                Some(e) => {
                                    *ptr1.add(56).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasi::clocks::wall_clock::Datetime{ seconds:seconds4, nanoseconds:nanoseconds4, } = e;
                                    *ptr1.add(64).cast::<i64>() = _rt::as_i64(seconds4);
                                    *ptr1.add(72).cast::<i32>() = _rt::as_i32(nanoseconds4);
                                }
                                None => {
                                    *ptr1.add(56).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match status_change_timestamp2 {
                                Some(e) => {
                                    *ptr1.add(80).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasi::clocks::wall_clock::Datetime{ seconds:seconds5, nanoseconds:nanoseconds5, } = e;
                                    *ptr1.add(88).cast::<i64>() = _rt::as_i64(seconds5);
                                    *ptr1.add(96).cast::<i32>() = _rt::as_i32(nanoseconds5);
                                }
                                None => {
                                    *ptr1.add(80).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_stat_at_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg3;
                    let bytes0 = _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                    let result1 = T::stat_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        PathFlags::empty() | PathFlags::from_bits_retain(((arg1 as u8) << 0) as _),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let DescriptorStat {
                                type_: type_3,
                                link_count: link_count3,
                                size: size3,
                                data_access_timestamp: data_access_timestamp3,
                                data_modification_timestamp: data_modification_timestamp3,
                                status_change_timestamp: status_change_timestamp3,
                            } = e;
                            *ptr2.add(8).cast::<u8>() = (type_3.clone() as i32) as u8;
                            *ptr2.add(16).cast::<i64>() = _rt::as_i64(link_count3);
                            *ptr2.add(24).cast::<i64>() = _rt::as_i64(size3);
                            match data_access_timestamp3 {
                                Some(e) => {
                                    *ptr2.add(32).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasi::clocks::wall_clock::Datetime{ seconds:seconds4, nanoseconds:nanoseconds4, } = e;
                                    *ptr2.add(40).cast::<i64>() = _rt::as_i64(seconds4);
                                    *ptr2.add(48).cast::<i32>() = _rt::as_i32(nanoseconds4);
                                }
                                None => {
                                    *ptr2.add(32).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match data_modification_timestamp3 {
                                Some(e) => {
                                    *ptr2.add(56).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasi::clocks::wall_clock::Datetime{ seconds:seconds5, nanoseconds:nanoseconds5, } = e;
                                    *ptr2.add(64).cast::<i64>() = _rt::as_i64(seconds5);
                                    *ptr2.add(72).cast::<i32>() = _rt::as_i32(nanoseconds5);
                                }
                                None => {
                                    *ptr2.add(56).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match status_change_timestamp3 {
                                Some(e) => {
                                    *ptr2.add(80).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasi::clocks::wall_clock::Datetime{ seconds:seconds6, nanoseconds:nanoseconds6, } = e;
                                    *ptr2.add(88).cast::<i64>() = _rt::as_i64(seconds6);
                                    *ptr2.add(96).cast::<i32>() = _rt::as_i32(nanoseconds6);
                                }
                                None => {
                                    *ptr2.add(80).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_set_times_at_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: i64,
                    arg6: i32,
                    arg7: i32,
                    arg8: i64,
                    arg9: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg3;
                    let bytes0 = _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                    let v1 = match arg4 {
                        0 => NewTimestamp::NoChange,
                        1 => NewTimestamp::Now,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            let e1 =
                                super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                    seconds: arg5 as u64,
                                    nanoseconds: arg6 as u32,
                                };
                            NewTimestamp::Timestamp(e1)
                        }
                    };
                    let v2 = match arg7 {
                        0 => NewTimestamp::NoChange,
                        1 => NewTimestamp::Now,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            let e2 =
                                super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                    seconds: arg8 as u64,
                                    nanoseconds: arg9 as u32,
                                };
                            NewTimestamp::Timestamp(e2)
                        }
                    };
                    let result3 = T::set_times_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        PathFlags::empty() | PathFlags::from_bits_retain(((arg1 as u8) << 0) as _),
                        _rt::string_lift(bytes0),
                        v1,
                        v2,
                    );
                    let ptr4 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result3 {
                        Ok(_) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr4.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_link_at_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg3;
                    let bytes0 = _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                    let len1 = arg6;
                    let bytes1 = _rt::Vec::from_raw_parts(arg5.cast(), len1, len1);
                    let result2 = T::link_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        PathFlags::empty() | PathFlags::from_bits_retain(((arg1 as u8) << 0) as _),
                        _rt::string_lift(bytes0),
                        DescriptorBorrow::lift(arg4 as u32 as usize),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(_) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr3.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_open_at_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg3;
                    let bytes0 = _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                    let result1 = T::open_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        PathFlags::empty() | PathFlags::from_bits_retain(((arg1 as u8) << 0) as _),
                        _rt::string_lift(bytes0),
                        OpenFlags::empty() | OpenFlags::from_bits_retain(((arg4 as u8) << 0) as _),
                        DescriptorFlags::empty()
                            | DescriptorFlags::from_bits_retain(((arg5 as u8) << 0) as _),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_readlink_at_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::readlink_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_descriptor_readlink_at<T: GuestDescriptor>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => (),
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_remove_directory_at_cabi<
                    T: GuestDescriptor,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::remove_directory_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_rename_at_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg5;
                    let bytes1 = _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);
                    let result2 = T::rename_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        DescriptorBorrow::lift(arg3 as u32 as usize),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(_) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr3.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_symlink_at_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::symlink_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(_) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr3.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_unlink_file_at_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::unlink_file_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_is_same_object_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::is_same_object(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        DescriptorBorrow::lift(arg1 as u32 as usize),
                    );
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_metadata_hash_cabi<T: GuestDescriptor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::metadata_hash(DescriptorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let MetadataHashValue {
                                lower: lower2,
                                upper: upper2,
                            } = e;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(lower2);
                            *ptr1.add(16).cast::<i64>() = _rt::as_i64(upper2);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_descriptor_metadata_hash_at_cabi<
                    T: GuestDescriptor,
                >(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg3;
                    let bytes0 = _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                    let result1 = T::metadata_hash_at(
                        DescriptorBorrow::lift(arg0 as u32 as usize).get(),
                        PathFlags::empty() | PathFlags::from_bits_retain(((arg1 as u8) << 0) as _),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let MetadataHashValue {
                                lower: lower3,
                                upper: upper3,
                            } = e;
                            *ptr2.add(8).cast::<i64>() = _rt::as_i64(lower3);
                            *ptr2.add(16).cast::<i64>() = _rt::as_i64(upper3);
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_directory_entry_stream_read_directory_entry_cabi<
                    T: GuestDirectoryEntryStream,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::read_directory_entry(
                        DirectoryEntryStreamBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let DirectoryEntry {
                                        type_: type_2,
                                        name: name2,
                                    } = e;
                                    *ptr1.add(8).cast::<u8>() = (type_2.clone() as i32) as u8;
                                    let vec3 = (name2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(16).cast::<usize>() = len3;
                                    *ptr1.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                None => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_directory_entry_stream_read_directory_entry<
                    T: GuestDirectoryEntryStream,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(12).cast::<*mut u8>();
                                    let l3 = *arg0.add(16).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                        _ => (),
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_filesystem_error_code_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::filesystem_error_code({
                        handle0 = super::super::super::super::wasi::io::error::Error::from_handle(
                            arg0 as u32,
                        );
                        &handle0
                    });
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Some(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                        None => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr2
                }
                pub trait Guest {
                    type Descriptor: GuestDescriptor;
                    type DirectoryEntryStream: GuestDirectoryEntryStream;
                    /// Attempts to extract a filesystem-related `error-code` from the stream
                    /// `error` provided.
                    ///
                    /// Stream operations which return `stream-error::last-operation-failed`
                    /// have a payload with more information about the operation that failed.
                    /// This payload can be passed through to this function to see if there's
                    /// filesystem-related information about the error to return.
                    ///
                    /// Note that this function is fallible because not all stream-related
                    /// errors are filesystem-related errors.
                    fn filesystem_error_code(err: &Error) -> Option<ErrorCode>;
                }
                pub trait GuestDescriptor: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:filesystem/types@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-new]descriptor"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:filesystem/types@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]descriptor"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    /// Return a stream for reading from a file, if available.
                    ///
                    /// May fail with an error-code describing why the file cannot be read.
                    ///
                    /// Multiple read, write, and append streams may be active on the same open
                    /// file and they do not interfere with each other.
                    ///
                    /// Note: This allows using `read-stream`, which is similar to `read` in POSIX.
                    fn read_via_stream(&self, offset: Filesize) -> Result<InputStream, ErrorCode>;
                    /// Return a stream for writing to a file, if available.
                    ///
                    /// May fail with an error-code describing why the file cannot be written.
                    ///
                    /// Note: This allows using `write-stream`, which is similar to `write` in
                    /// POSIX.
                    fn write_via_stream(&self, offset: Filesize)
                        -> Result<OutputStream, ErrorCode>;
                    /// Return a stream for appending to a file, if available.
                    ///
                    /// May fail with an error-code describing why the file cannot be appended.
                    ///
                    /// Note: This allows using `write-stream`, which is similar to `write` with
                    /// `O_APPEND` in in POSIX.
                    fn append_via_stream(&self) -> Result<OutputStream, ErrorCode>;
                    /// Provide file advisory information on a descriptor.
                    ///
                    /// This is similar to `posix_fadvise` in POSIX.
                    fn advise(
                        &self,
                        offset: Filesize,
                        length: Filesize,
                        advice: Advice,
                    ) -> Result<(), ErrorCode>;
                    /// Synchronize the data of a file to disk.
                    ///
                    /// This function succeeds with no effect if the file descriptor is not
                    /// opened for writing.
                    ///
                    /// Note: This is similar to `fdatasync` in POSIX.
                    fn sync_data(&self) -> Result<(), ErrorCode>;
                    /// Get flags associated with a descriptor.
                    ///
                    /// Note: This returns similar flags to `fcntl(fd, F_GETFL)` in POSIX.
                    ///
                    /// Note: This returns the value that was the `fs_flags` value returned
                    /// from `fdstat_get` in earlier versions of WASI.
                    fn get_flags(&self) -> Result<DescriptorFlags, ErrorCode>;
                    /// Get the dynamic type of a descriptor.
                    ///
                    /// Note: This returns the same value as the `type` field of the `fd-stat`
                    /// returned by `stat`, `stat-at` and similar.
                    ///
                    /// Note: This returns similar flags to the `st_mode & S_IFMT` value provided
                    /// by `fstat` in POSIX.
                    ///
                    /// Note: This returns the value that was the `fs_filetype` value returned
                    /// from `fdstat_get` in earlier versions of WASI.
                    fn get_type(&self) -> Result<DescriptorType, ErrorCode>;
                    /// Adjust the size of an open file. If this increases the file's size, the
                    /// extra bytes are filled with zeros.
                    ///
                    /// Note: This was called `fd_filestat_set_size` in earlier versions of WASI.
                    fn set_size(&self, size: Filesize) -> Result<(), ErrorCode>;
                    /// Adjust the timestamps of an open file or directory.
                    ///
                    /// Note: This is similar to `futimens` in POSIX.
                    ///
                    /// Note: This was called `fd_filestat_set_times` in earlier versions of WASI.
                    fn set_times(
                        &self,
                        data_access_timestamp: NewTimestamp,
                        data_modification_timestamp: NewTimestamp,
                    ) -> Result<(), ErrorCode>;
                    /// Read from a descriptor, without using and updating the descriptor's offset.
                    ///
                    /// This function returns a list of bytes containing the data that was
                    /// read, along with a bool which, when true, indicates that the end of the
                    /// file was reached. The returned list will contain up to `length` bytes; it
                    /// may return fewer than requested, if the end of the file is reached or
                    /// if the I/O operation is interrupted.
                    ///
                    /// In the future, this may change to return a `stream<u8, error-code>`.
                    ///
                    /// Note: This is similar to `pread` in POSIX.
                    fn read(
                        &self,
                        length: Filesize,
                        offset: Filesize,
                    ) -> Result<(_rt::Vec<u8>, bool), ErrorCode>;
                    /// Write to a descriptor, without using and updating the descriptor's offset.
                    ///
                    /// It is valid to write past the end of a file; the file is extended to the
                    /// extent of the write, with bytes between the previous end and the start of
                    /// the write set to zero.
                    ///
                    /// In the future, this may change to take a `stream<u8, error-code>`.
                    ///
                    /// Note: This is similar to `pwrite` in POSIX.
                    fn write(
                        &self,
                        buffer: _rt::Vec<u8>,
                        offset: Filesize,
                    ) -> Result<Filesize, ErrorCode>;
                    /// Read directory entries from a directory.
                    ///
                    /// On filesystems where directories contain entries referring to themselves
                    /// and their parents, often named `.` and `..` respectively, these entries
                    /// are omitted.
                    ///
                    /// This always returns a new stream which starts at the beginning of the
                    /// directory. Multiple streams may be active on the same directory, and they
                    /// do not interfere with each other.
                    fn read_directory(&self) -> Result<DirectoryEntryStream, ErrorCode>;
                    /// Synchronize the data and metadata of a file to disk.
                    ///
                    /// This function succeeds with no effect if the file descriptor is not
                    /// opened for writing.
                    ///
                    /// Note: This is similar to `fsync` in POSIX.
                    fn sync(&self) -> Result<(), ErrorCode>;
                    /// Create a directory.
                    ///
                    /// Note: This is similar to `mkdirat` in POSIX.
                    fn create_directory_at(&self, path: _rt::String) -> Result<(), ErrorCode>;
                    /// Return the attributes of an open file or directory.
                    ///
                    /// Note: This is similar to `fstat` in POSIX, except that it does not return
                    /// device and inode information. For testing whether two descriptors refer to
                    /// the same underlying filesystem object, use `is-same-object`. To obtain
                    /// additional data that can be used do determine whether a file has been
                    /// modified, use `metadata-hash`.
                    ///
                    /// Note: This was called `fd_filestat_get` in earlier versions of WASI.
                    fn stat(&self) -> Result<DescriptorStat, ErrorCode>;
                    /// Return the attributes of a file or directory.
                    ///
                    /// Note: This is similar to `fstatat` in POSIX, except that it does not
                    /// return device and inode information. See the `stat` description for a
                    /// discussion of alternatives.
                    ///
                    /// Note: This was called `path_filestat_get` in earlier versions of WASI.
                    fn stat_at(
                        &self,
                        path_flags: PathFlags,
                        path: _rt::String,
                    ) -> Result<DescriptorStat, ErrorCode>;
                    /// Adjust the timestamps of a file or directory.
                    ///
                    /// Note: This is similar to `utimensat` in POSIX.
                    ///
                    /// Note: This was called `path_filestat_set_times` in earlier versions of
                    /// WASI.
                    fn set_times_at(
                        &self,
                        path_flags: PathFlags,
                        path: _rt::String,
                        data_access_timestamp: NewTimestamp,
                        data_modification_timestamp: NewTimestamp,
                    ) -> Result<(), ErrorCode>;
                    /// Create a hard link.
                    ///
                    /// Note: This is similar to `linkat` in POSIX.
                    fn link_at(
                        &self,
                        old_path_flags: PathFlags,
                        old_path: _rt::String,
                        new_descriptor: DescriptorBorrow<'_>,
                        new_path: _rt::String,
                    ) -> Result<(), ErrorCode>;
                    /// Open a file or directory.
                    ///
                    /// The returned descriptor is not guaranteed to be the lowest-numbered
                    /// descriptor not currently open/ it is randomized to prevent applications
                    /// from depending on making assumptions about indexes, since this is
                    /// error-prone in multi-threaded contexts. The returned descriptor is
                    /// guaranteed to be less than 2**31.
                    ///
                    /// If `flags` contains `descriptor-flags::mutate-directory`, and the base
                    /// descriptor doesn't have `descriptor-flags::mutate-directory` set,
                    /// `open-at` fails with `error-code::read-only`.
                    ///
                    /// If `flags` contains `write` or `mutate-directory`, or `open-flags`
                    /// contains `truncate` or `create`, and the base descriptor doesn't have
                    /// `descriptor-flags::mutate-directory` set, `open-at` fails with
                    /// `error-code::read-only`.
                    ///
                    /// Note: This is similar to `openat` in POSIX.
                    fn open_at(
                        &self,
                        path_flags: PathFlags,
                        path: _rt::String,
                        open_flags: OpenFlags,
                        flags: DescriptorFlags,
                    ) -> Result<Descriptor, ErrorCode>;
                    /// Read the contents of a symbolic link.
                    ///
                    /// If the contents contain an absolute or rooted path in the underlying
                    /// filesystem, this function fails with `error-code::not-permitted`.
                    ///
                    /// Note: This is similar to `readlinkat` in POSIX.
                    fn readlink_at(&self, path: _rt::String) -> Result<_rt::String, ErrorCode>;
                    /// Remove a directory.
                    ///
                    /// Return `error-code::not-empty` if the directory is not empty.
                    ///
                    /// Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.
                    fn remove_directory_at(&self, path: _rt::String) -> Result<(), ErrorCode>;
                    /// Rename a filesystem object.
                    ///
                    /// Note: This is similar to `renameat` in POSIX.
                    fn rename_at(
                        &self,
                        old_path: _rt::String,
                        new_descriptor: DescriptorBorrow<'_>,
                        new_path: _rt::String,
                    ) -> Result<(), ErrorCode>;
                    /// Create a symbolic link (also known as a "symlink").
                    ///
                    /// If `old-path` starts with `/`, the function fails with
                    /// `error-code::not-permitted`.
                    ///
                    /// Note: This is similar to `symlinkat` in POSIX.
                    fn symlink_at(
                        &self,
                        old_path: _rt::String,
                        new_path: _rt::String,
                    ) -> Result<(), ErrorCode>;
                    /// Unlink a filesystem object that is not a directory.
                    ///
                    /// Return `error-code::is-directory` if the path refers to a directory.
                    /// Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.
                    fn unlink_file_at(&self, path: _rt::String) -> Result<(), ErrorCode>;
                    /// Test whether two descriptors refer to the same filesystem object.
                    ///
                    /// In POSIX, this corresponds to testing whether the two descriptors have the
                    /// same device (`st_dev`) and inode (`st_ino` or `d_ino`) numbers.
                    /// wasi-filesystem does not expose device and inode numbers, so this function
                    /// may be used instead.
                    fn is_same_object(&self, other: DescriptorBorrow<'_>) -> bool;
                    /// Return a hash of the metadata associated with a filesystem object referred
                    /// to by a descriptor.
                    ///
                    /// This returns a hash of the last-modification timestamp and file size, and
                    /// may also include the inode number, device number, birth timestamp, and
                    /// other metadata fields that may change when the file is modified or
                    /// replaced. It may also include a secret value chosen by the
                    /// implementation and not otherwise exposed.
                    ///
                    /// Implementations are encourated to provide the following properties:
                    ///
                    /// - If the file is not modified or replaced, the computed hash value should
                    /// usually not change.
                    /// - If the object is modified or replaced, the computed hash value should
                    /// usually change.
                    /// - The inputs to the hash should not be easily computable from the
                    /// computed hash.
                    ///
                    /// However, none of these is required.
                    fn metadata_hash(&self) -> Result<MetadataHashValue, ErrorCode>;
                    /// Return a hash of the metadata associated with a filesystem object referred
                    /// to by a directory descriptor and a relative path.
                    ///
                    /// This performs the same hash computation as `metadata-hash`.
                    fn metadata_hash_at(
                        &self,
                        path_flags: PathFlags,
                        path: _rt::String,
                    ) -> Result<MetadataHashValue, ErrorCode>;
                }
                pub trait GuestDirectoryEntryStream: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:filesystem/types@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-new]directory-entry-stream"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:filesystem/types@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]directory-entry-stream"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    /// Read a single directory entry from a `directory-entry-stream`.
                    fn read_directory_entry(&self) -> Result<Option<DirectoryEntry>, ErrorCode>;
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_filesystem_types_0_2_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.read-via-stream"]
    unsafe extern "C" fn export_method_descriptor_read_via_stream(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_read_via_stream_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.write-via-stream"]
    unsafe extern "C" fn export_method_descriptor_write_via_stream(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_write_via_stream_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.append-via-stream"]
    unsafe extern "C" fn export_method_descriptor_append_via_stream(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_append_via_stream_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.advise"]
    unsafe extern "C" fn export_method_descriptor_advise(arg0: *mut u8,arg1: i64,arg2: i64,arg3: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_advise_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.sync-data"]
    unsafe extern "C" fn export_method_descriptor_sync_data(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_sync_data_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.get-flags"]
    unsafe extern "C" fn export_method_descriptor_get_flags(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_get_flags_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.get-type"]
    unsafe extern "C" fn export_method_descriptor_get_type(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_get_type_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.set-size"]
    unsafe extern "C" fn export_method_descriptor_set_size(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_set_size_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.set-times"]
    unsafe extern "C" fn export_method_descriptor_set_times(arg0: *mut u8,arg1: i32,arg2: i64,arg3: i32,arg4: i32,arg5: i64,arg6: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_set_times_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.read"]
    unsafe extern "C" fn export_method_descriptor_read(arg0: *mut u8,arg1: i64,arg2: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_read_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_wasi:filesystem/types@0.2.0#[method]descriptor.read"]
    unsafe extern "C" fn _post_return_method_descriptor_read(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_descriptor_read::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.write"]
    unsafe extern "C" fn export_method_descriptor_write(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_write_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.read-directory"]
    unsafe extern "C" fn export_method_descriptor_read_directory(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_read_directory_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.sync"]
    unsafe extern "C" fn export_method_descriptor_sync(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_sync_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.create-directory-at"]
    unsafe extern "C" fn export_method_descriptor_create_directory_at(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_create_directory_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.stat"]
    unsafe extern "C" fn export_method_descriptor_stat(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_stat_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.stat-at"]
    unsafe extern "C" fn export_method_descriptor_stat_at(arg0: *mut u8,arg1: i32,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_stat_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.set-times-at"]
    unsafe extern "C" fn export_method_descriptor_set_times_at(arg0: *mut u8,arg1: i32,arg2: *mut u8,arg3: usize,arg4: i32,arg5: i64,arg6: i32,arg7: i32,arg8: i64,arg9: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_set_times_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.link-at"]
    unsafe extern "C" fn export_method_descriptor_link_at(arg0: *mut u8,arg1: i32,arg2: *mut u8,arg3: usize,arg4: i32,arg5: *mut u8,arg6: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_link_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.open-at"]
    unsafe extern "C" fn export_method_descriptor_open_at(arg0: *mut u8,arg1: i32,arg2: *mut u8,arg3: usize,arg4: i32,arg5: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_open_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2, arg3, arg4, arg5)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.readlink-at"]
    unsafe extern "C" fn export_method_descriptor_readlink_at(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_readlink_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_wasi:filesystem/types@0.2.0#[method]descriptor.readlink-at"]
    unsafe extern "C" fn _post_return_method_descriptor_readlink_at(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_descriptor_readlink_at::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.remove-directory-at"]
    unsafe extern "C" fn export_method_descriptor_remove_directory_at(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_remove_directory_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.rename-at"]
    unsafe extern "C" fn export_method_descriptor_rename_at(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,arg4: *mut u8,arg5: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_rename_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2, arg3, arg4, arg5)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.symlink-at"]
    unsafe extern "C" fn export_method_descriptor_symlink_at(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_symlink_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2, arg3, arg4)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.unlink-file-at"]
    unsafe extern "C" fn export_method_descriptor_unlink_file_at(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_unlink_file_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.is-same-object"]
    unsafe extern "C" fn export_method_descriptor_is_same_object(arg0: *mut u8,arg1: i32,) -> i32 {
      $($path_to_types)*::_export_method_descriptor_is_same_object_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.metadata-hash"]
    unsafe extern "C" fn export_method_descriptor_metadata_hash(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_metadata_hash_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]descriptor.metadata-hash-at"]
    unsafe extern "C" fn export_method_descriptor_metadata_hash_at(arg0: *mut u8,arg1: i32,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_descriptor_metadata_hash_at_cabi::<<$ty as $($path_to_types)*::Guest>::Descriptor>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#[method]directory-entry-stream.read-directory-entry"]
    unsafe extern "C" fn export_method_directory_entry_stream_read_directory_entry(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_directory_entry_stream_read_directory_entry_cabi::<<$ty as $($path_to_types)*::Guest>::DirectoryEntryStream>(arg0)
    }
    #[export_name = "cabi_post_wasi:filesystem/types@0.2.0#[method]directory-entry-stream.read-directory-entry"]
    unsafe extern "C" fn _post_return_method_directory_entry_stream_read_directory_entry(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_directory_entry_stream_read_directory_entry::<<$ty as $($path_to_types)*::Guest>::DirectoryEntryStream>(arg0)
    }
    #[export_name = "wasi:filesystem/types@0.2.0#filesystem-error-code"]
    unsafe extern "C" fn export_filesystem_error_code(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_filesystem_error_code_cabi::<$ty>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "wasi:filesystem/types@0.2.0#[dtor]descriptor"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::Descriptor::dtor::<
        <$ty as $($path_to_types)*::Guest>::Descriptor
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "wasi:filesystem/types@0.2.0#[dtor]directory-entry-stream"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::DirectoryEntryStream::dtor::<
        <$ty as $($path_to_types)*::Guest>::DirectoryEntryStream
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_wasi_filesystem_types_0_2_0_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 104]);
                static mut _RET_AREA: _RetArea =
                    _RetArea([::core::mem::MaybeUninit::uninit(); 104]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod preopens {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Descriptor =
                    super::super::super::super::exports::wasi::filesystem::types::Descriptor;
                pub type DescriptorBorrow<'a> =
                    super::super::super::super::exports::wasi::filesystem::types::DescriptorBorrow<
                        'a,
                    >;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_directories_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_directories();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec4 = result0;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(vec4.len() * 12, 4);
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4.add(i * 12);
                        {
                            let (t2_0, t2_1) = e;
                            *base.add(0).cast::<i32>() = (t2_0).take_handle() as i32;
                            let vec3 = (t2_1.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base.add(8).cast::<usize>() = len3;
                            *base.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len4;
                    *ptr1.add(0).cast::<*mut u8>() = result4;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_directories<T: Guest>(arg0: *mut u8) {
                    let l2 = *arg0.add(0).cast::<*mut u8>();
                    let l3 = *arg0.add(4).cast::<usize>();
                    let base4 = l2;
                    let len4 = l3;
                    for i in 0..len4 {
                        let base = base4.add(i * 12);
                        {
                            let l0 = *base.add(4).cast::<*mut u8>();
                            let l1 = *base.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                        }
                    }
                    _rt::cabi_dealloc(base4, len4 * 12, 4);
                }
                pub trait Guest {
                    /// Return the set of preopened directories, and their path.
                    fn get_directories() -> _rt::Vec<(Descriptor, _rt::String)>;
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_filesystem_preopens_0_2_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "wasi:filesystem/preopens@0.2.0#get-directories"]
    unsafe extern "C" fn export_get_directories() -> *mut u8 {
      $($path_to_types)*::_export_get_directories_cabi::<$ty>()
    }
    #[export_name = "cabi_post_wasi:filesystem/preopens@0.2.0#get-directories"]
    unsafe extern "C" fn _post_return_get_directories(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_get_directories::<$ty>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_wasi_filesystem_preopens_0_2_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }
        }
        #[allow(dead_code)]
        pub mod sockets {
            #[allow(dead_code, clippy::all)]
            pub mod network {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// An opaque resource that represents access to (a subset of) the network.
                /// This enables context-based security for networking.
                /// There is no need for this to map 1:1 to a physical network interface.

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Network {
                    handle: _rt::Resource<Network>,
                }

                type _NetworkRep<T> = Option<T>;

                impl Network {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Network`.
                    pub fn new<T: GuestNetwork>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _NetworkRep<T> = Some(val);
                        let ptr: *mut _NetworkRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestNetwork>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestNetwork>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestNetwork>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestNetwork` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _NetworkRep<T>);
                    }

                    fn as_ptr<T: GuestNetwork>(&self) -> *mut _NetworkRep<T> {
                        Network::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Network`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct NetworkBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Network>,
                }

                impl<'a> NetworkBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestNetwork>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _NetworkRep<T> {
                        Network::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Network {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/network@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]network"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                /// Error codes.
                ///
                /// In theory, every API can return any error code.
                /// In practice, API's typically only return the errors documented per API
                /// combined with a couple of errors that are always possible:
                /// - `unknown`
                /// - `access-denied`
                /// - `not-supported`
                /// - `out-of-memory`
                /// - `concurrency-conflict`
                ///
                /// See each individual API for what the POSIX equivalents are. They sometimes differ per API.
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum ErrorCode {
                    /// Unknown error
                    Unknown,
                    /// Access denied.
                    ///
                    /// POSIX equivalent: EACCES, EPERM
                    AccessDenied,
                    /// The operation is not supported.
                    ///
                    /// POSIX equivalent: EOPNOTSUPP
                    NotSupported,
                    /// One of the arguments is invalid.
                    ///
                    /// POSIX equivalent: EINVAL
                    InvalidArgument,
                    /// Not enough memory to complete the operation.
                    ///
                    /// POSIX equivalent: ENOMEM, ENOBUFS, EAI_MEMORY
                    OutOfMemory,
                    /// The operation timed out before it could finish completely.
                    Timeout,
                    /// This operation is incompatible with another asynchronous operation that is already in progress.
                    ///
                    /// POSIX equivalent: EALREADY
                    ConcurrencyConflict,
                    /// Trying to finish an asynchronous operation that:
                    /// - has not been started yet, or:
                    /// - was already finished by a previous `finish-*` call.
                    ///
                    /// Note: this is scheduled to be removed when `future`s are natively supported.
                    NotInProgress,
                    /// The operation has been aborted because it could not be completed immediately.
                    ///
                    /// Note: this is scheduled to be removed when `future`s are natively supported.
                    WouldBlock,
                    /// The operation is not valid in the socket's current state.
                    InvalidState,
                    /// A new socket resource could not be created because of a system limit.
                    NewSocketLimit,
                    /// A bind operation failed because the provided address is not an address that the `network` can bind to.
                    AddressNotBindable,
                    /// A bind operation failed because the provided address is already in use or because there are no ephemeral ports available.
                    AddressInUse,
                    /// The remote address is not reachable
                    RemoteUnreachable,
                    /// The TCP connection was forcefully rejected
                    ConnectionRefused,
                    /// The TCP connection was reset.
                    ConnectionReset,
                    /// A TCP connection was aborted.
                    ConnectionAborted,
                    /// The size of a datagram sent to a UDP socket exceeded the maximum
                    /// supported size.
                    DatagramTooLarge,
                    /// Name does not exist or has no suitable associated IP addresses.
                    NameUnresolvable,
                    /// A temporary failure in name resolution occurred.
                    TemporaryResolverFailure,
                    /// A permanent failure in name resolution occurred.
                    PermanentResolverFailure,
                }
                impl ErrorCode {
                    pub fn name(&self) -> &'static str {
                        match self {
                            ErrorCode::Unknown => "unknown",
                            ErrorCode::AccessDenied => "access-denied",
                            ErrorCode::NotSupported => "not-supported",
                            ErrorCode::InvalidArgument => "invalid-argument",
                            ErrorCode::OutOfMemory => "out-of-memory",
                            ErrorCode::Timeout => "timeout",
                            ErrorCode::ConcurrencyConflict => "concurrency-conflict",
                            ErrorCode::NotInProgress => "not-in-progress",
                            ErrorCode::WouldBlock => "would-block",
                            ErrorCode::InvalidState => "invalid-state",
                            ErrorCode::NewSocketLimit => "new-socket-limit",
                            ErrorCode::AddressNotBindable => "address-not-bindable",
                            ErrorCode::AddressInUse => "address-in-use",
                            ErrorCode::RemoteUnreachable => "remote-unreachable",
                            ErrorCode::ConnectionRefused => "connection-refused",
                            ErrorCode::ConnectionReset => "connection-reset",
                            ErrorCode::ConnectionAborted => "connection-aborted",
                            ErrorCode::DatagramTooLarge => "datagram-too-large",
                            ErrorCode::NameUnresolvable => "name-unresolvable",
                            ErrorCode::TemporaryResolverFailure => "temporary-resolver-failure",
                            ErrorCode::PermanentResolverFailure => "permanent-resolver-failure",
                        }
                    }
                    pub fn message(&self) -> &'static str {
                        match self {
          ErrorCode::Unknown => "Unknown error",
          ErrorCode::AccessDenied => "Access denied.

          POSIX equivalent: EACCES, EPERM",
          ErrorCode::NotSupported => "The operation is not supported.

          POSIX equivalent: EOPNOTSUPP",
          ErrorCode::InvalidArgument => "One of the arguments is invalid.

          POSIX equivalent: EINVAL",
          ErrorCode::OutOfMemory => "Not enough memory to complete the operation.

          POSIX equivalent: ENOMEM, ENOBUFS, EAI_MEMORY",
          ErrorCode::Timeout => "The operation timed out before it could finish completely.",
          ErrorCode::ConcurrencyConflict => "This operation is incompatible with another asynchronous operation that is already in progress.

          POSIX equivalent: EALREADY",
          ErrorCode::NotInProgress => "Trying to finish an asynchronous operation that:
          - has not been started yet, or:
          - was already finished by a previous `finish-*` call.

          Note: this is scheduled to be removed when `future`s are natively supported.",
          ErrorCode::WouldBlock => "The operation has been aborted because it could not be completed immediately.

          Note: this is scheduled to be removed when `future`s are natively supported.",
          ErrorCode::InvalidState => "The operation is not valid in the socket's current state.",
          ErrorCode::NewSocketLimit => "A new socket resource could not be created because of a system limit.",
          ErrorCode::AddressNotBindable => "A bind operation failed because the provided address is not an address that the `network` can bind to.",
          ErrorCode::AddressInUse => "A bind operation failed because the provided address is already in use or because there are no ephemeral ports available.",
          ErrorCode::RemoteUnreachable => "The remote address is not reachable",
          ErrorCode::ConnectionRefused => "The TCP connection was forcefully rejected",
          ErrorCode::ConnectionReset => "The TCP connection was reset.",
          ErrorCode::ConnectionAborted => "A TCP connection was aborted.",
          ErrorCode::DatagramTooLarge => "The size of a datagram sent to a UDP socket exceeded the maximum
          supported size.",
          ErrorCode::NameUnresolvable => "Name does not exist or has no suitable associated IP addresses.",
          ErrorCode::TemporaryResolverFailure => "A temporary failure in name resolution occurred.",
          ErrorCode::PermanentResolverFailure => "A permanent failure in name resolution occurred.",
        }
                    }
                }
                impl ::core::fmt::Debug for ErrorCode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ErrorCode")
                            .field("code", &(*self as i32))
                            .field("name", &self.name())
                            .field("message", &self.message())
                            .finish()
                    }
                }
                impl ::core::fmt::Display for ErrorCode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{} (error {})", self.name(), *self as i32)
                    }
                }

                impl std::error::Error for ErrorCode {}

                impl ErrorCode {
                    pub(crate) unsafe fn _lift(val: u8) -> ErrorCode {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => ErrorCode::Unknown,
                            1 => ErrorCode::AccessDenied,
                            2 => ErrorCode::NotSupported,
                            3 => ErrorCode::InvalidArgument,
                            4 => ErrorCode::OutOfMemory,
                            5 => ErrorCode::Timeout,
                            6 => ErrorCode::ConcurrencyConflict,
                            7 => ErrorCode::NotInProgress,
                            8 => ErrorCode::WouldBlock,
                            9 => ErrorCode::InvalidState,
                            10 => ErrorCode::NewSocketLimit,
                            11 => ErrorCode::AddressNotBindable,
                            12 => ErrorCode::AddressInUse,
                            13 => ErrorCode::RemoteUnreachable,
                            14 => ErrorCode::ConnectionRefused,
                            15 => ErrorCode::ConnectionReset,
                            16 => ErrorCode::ConnectionAborted,
                            17 => ErrorCode::DatagramTooLarge,
                            18 => ErrorCode::NameUnresolvable,
                            19 => ErrorCode::TemporaryResolverFailure,
                            20 => ErrorCode::PermanentResolverFailure,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum IpAddressFamily {
                    /// Similar to `AF_INET` in POSIX.
                    Ipv4,
                    /// Similar to `AF_INET6` in POSIX.
                    Ipv6,
                }
                impl ::core::fmt::Debug for IpAddressFamily {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            IpAddressFamily::Ipv4 => {
                                f.debug_tuple("IpAddressFamily::Ipv4").finish()
                            }
                            IpAddressFamily::Ipv6 => {
                                f.debug_tuple("IpAddressFamily::Ipv6").finish()
                            }
                        }
                    }
                }

                impl IpAddressFamily {
                    pub(crate) unsafe fn _lift(val: u8) -> IpAddressFamily {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => IpAddressFamily::Ipv4,
                            1 => IpAddressFamily::Ipv6,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                pub type Ipv4Address = (u8, u8, u8, u8);
                pub type Ipv6Address = (u16, u16, u16, u16, u16, u16, u16, u16);
                #[derive(Clone, Copy)]
                pub enum IpAddress {
                    Ipv4(Ipv4Address),
                    Ipv6(Ipv6Address),
                }
                impl ::core::fmt::Debug for IpAddress {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            IpAddress::Ipv4(e) => {
                                f.debug_tuple("IpAddress::Ipv4").field(e).finish()
                            }
                            IpAddress::Ipv6(e) => {
                                f.debug_tuple("IpAddress::Ipv6").field(e).finish()
                            }
                        }
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Ipv4SocketAddress {
                    /// sin_port
                    pub port: u16,
                    /// sin_addr
                    pub address: Ipv4Address,
                }
                impl ::core::fmt::Debug for Ipv4SocketAddress {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Ipv4SocketAddress")
                            .field("port", &self.port)
                            .field("address", &self.address)
                            .finish()
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Ipv6SocketAddress {
                    /// sin6_port
                    pub port: u16,
                    /// sin6_flowinfo
                    pub flow_info: u32,
                    /// sin6_addr
                    pub address: Ipv6Address,
                    /// sin6_scope_id
                    pub scope_id: u32,
                }
                impl ::core::fmt::Debug for Ipv6SocketAddress {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Ipv6SocketAddress")
                            .field("port", &self.port)
                            .field("flow-info", &self.flow_info)
                            .field("address", &self.address)
                            .field("scope-id", &self.scope_id)
                            .finish()
                    }
                }
                #[derive(Clone, Copy)]
                pub enum IpSocketAddress {
                    Ipv4(Ipv4SocketAddress),
                    Ipv6(Ipv6SocketAddress),
                }
                impl ::core::fmt::Debug for IpSocketAddress {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            IpSocketAddress::Ipv4(e) => {
                                f.debug_tuple("IpSocketAddress::Ipv4").field(e).finish()
                            }
                            IpSocketAddress::Ipv6(e) => {
                                f.debug_tuple("IpSocketAddress::Ipv6").field(e).finish()
                            }
                        }
                    }
                }
                pub trait Guest {
                    type Network: GuestNetwork;
                }
                pub trait GuestNetwork: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/network@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-new]network"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/network@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]network"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_sockets_network_0_2_0_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


        const _: () = {
          #[doc(hidden)]
          #[export_name = "wasi:sockets/network@0.2.0#[dtor]network"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: *mut u8) {
            $($path_to_types)*::Network::dtor::<
            <$ty as $($path_to_types)*::Guest>::Network
            >(rep)
          }
        };

      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_wasi_sockets_network_0_2_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod instance_network {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Network =
                    super::super::super::super::exports::wasi::sockets::network::Network;
                pub type NetworkBorrow<'a> =
                    super::super::super::super::exports::wasi::sockets::network::NetworkBorrow<'a>;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_instance_network_cabi<T: Guest>() -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::instance_network();
                    (result0).take_handle() as i32
                }
                pub trait Guest {
                    /// Get a handle to the default network.
                    fn instance_network() -> Network;
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_sockets_instance_network_0_2_0_cabi{
    ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

      #[export_name = "wasi:sockets/instance-network@0.2.0#instance-network"]
      unsafe extern "C" fn export_instance_network() -> i32 {
        $($path_to_types)*::_export_instance_network_cabi::<$ty>()
      }
    };);
  }
                #[doc(hidden)]
                pub(crate) use __export_wasi_sockets_instance_network_0_2_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod udp {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Pollable = super::super::super::super::wasi::io::poll::Pollable;
                pub type Network =
                    super::super::super::super::exports::wasi::sockets::network::Network;
                pub type NetworkBorrow<'a> =
                    super::super::super::super::exports::wasi::sockets::network::NetworkBorrow<'a>;
                pub type ErrorCode =
                    super::super::super::super::exports::wasi::sockets::network::ErrorCode;
                pub type IpSocketAddress =
                    super::super::super::super::exports::wasi::sockets::network::IpSocketAddress;
                pub type IpAddressFamily =
                    super::super::super::super::exports::wasi::sockets::network::IpAddressFamily;
                /// A received datagram.
                #[derive(Clone)]
                pub struct IncomingDatagram {
                    /// The payload.
                    ///
                    /// Theoretical max size: ~64 KiB. In practice, typically less than 1500 bytes.
                    pub data: _rt::Vec<u8>,
                    /// The source address.
                    ///
                    /// This field is guaranteed to match the remote address the stream was initialized with, if any.
                    ///
                    /// Equivalent to the `src_addr` out parameter of `recvfrom`.
                    pub remote_address: IpSocketAddress,
                }
                impl ::core::fmt::Debug for IncomingDatagram {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("IncomingDatagram")
                            .field("data", &self.data)
                            .field("remote-address", &self.remote_address)
                            .finish()
                    }
                }
                /// A datagram to be sent out.
                #[derive(Clone)]
                pub struct OutgoingDatagram {
                    /// The payload.
                    pub data: _rt::Vec<u8>,
                    /// The destination address.
                    ///
                    /// The requirements on this field depend on how the stream was initialized:
                    /// - with a remote address: this field must be None or match the stream's remote address exactly.
                    /// - without a remote address: this field is required.
                    ///
                    /// If this value is None, the send operation is equivalent to `send` in POSIX. Otherwise it is equivalent to `sendto`.
                    pub remote_address: Option<IpSocketAddress>,
                }
                impl ::core::fmt::Debug for OutgoingDatagram {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("OutgoingDatagram")
                            .field("data", &self.data)
                            .field("remote-address", &self.remote_address)
                            .finish()
                    }
                }
                /// A UDP socket handle.

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct UdpSocket {
                    handle: _rt::Resource<UdpSocket>,
                }

                type _UdpSocketRep<T> = Option<T>;

                impl UdpSocket {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `UdpSocket`.
                    pub fn new<T: GuestUdpSocket>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _UdpSocketRep<T> = Some(val);
                        let ptr: *mut _UdpSocketRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestUdpSocket>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestUdpSocket>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestUdpSocket>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestUdpSocket` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _UdpSocketRep<T>);
                    }

                    fn as_ptr<T: GuestUdpSocket>(&self) -> *mut _UdpSocketRep<T> {
                        UdpSocket::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`UdpSocket`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct UdpSocketBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a UdpSocket>,
                }

                impl<'a> UdpSocketBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestUdpSocket>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _UdpSocketRep<T> {
                        UdpSocket::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for UdpSocket {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/udp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]udp-socket"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct IncomingDatagramStream {
                    handle: _rt::Resource<IncomingDatagramStream>,
                }

                type _IncomingDatagramStreamRep<T> = Option<T>;

                impl IncomingDatagramStream {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `IncomingDatagramStream`.
                    pub fn new<T: GuestIncomingDatagramStream>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _IncomingDatagramStreamRep<T> = Some(val);
                        let ptr: *mut _IncomingDatagramStreamRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestIncomingDatagramStream>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestIncomingDatagramStream>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestIncomingDatagramStream>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestIncomingDatagramStream` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _IncomingDatagramStreamRep<T>);
                    }

                    fn as_ptr<T: GuestIncomingDatagramStream>(
                        &self,
                    ) -> *mut _IncomingDatagramStreamRep<T> {
                        IncomingDatagramStream::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`IncomingDatagramStream`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct IncomingDatagramStreamBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a IncomingDatagramStream>,
                }

                impl<'a> IncomingDatagramStreamBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestIncomingDatagramStream>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _IncomingDatagramStreamRep<T> {
                        IncomingDatagramStream::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for IncomingDatagramStream {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/udp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]incoming-datagram-stream"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct OutgoingDatagramStream {
                    handle: _rt::Resource<OutgoingDatagramStream>,
                }

                type _OutgoingDatagramStreamRep<T> = Option<T>;

                impl OutgoingDatagramStream {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `OutgoingDatagramStream`.
                    pub fn new<T: GuestOutgoingDatagramStream>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _OutgoingDatagramStreamRep<T> = Some(val);
                        let ptr: *mut _OutgoingDatagramStreamRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestOutgoingDatagramStream>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestOutgoingDatagramStream>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestOutgoingDatagramStream>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestOutgoingDatagramStream` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _OutgoingDatagramStreamRep<T>);
                    }

                    fn as_ptr<T: GuestOutgoingDatagramStream>(
                        &self,
                    ) -> *mut _OutgoingDatagramStreamRep<T> {
                        OutgoingDatagramStream::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`OutgoingDatagramStream`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct OutgoingDatagramStreamBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a OutgoingDatagramStream>,
                }

                impl<'a> OutgoingDatagramStreamBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestOutgoingDatagramStream>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _OutgoingDatagramStreamRep<T> {
                        OutgoingDatagramStream::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for OutgoingDatagramStream {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/udp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]outgoing-datagram-stream"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_start_bind_cabi<T: GuestUdpSocket>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: i32,
                    arg10: i32,
                    arg11: i32,
                    arg12: i32,
                    arg13: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    use super::super::super::super::exports::wasi::sockets::network::IpSocketAddress as V0;
                    let v0 = match arg2 {
                        0 => {
                            let e0 = super::super::super::super::exports::wasi::sockets::network::Ipv4SocketAddress{
        port: arg3 as u16,
        address: (arg4 as u8, arg5 as u8, arg6 as u8, arg7 as u8),
      };
                            V0::Ipv4(e0)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e0 = super::super::super::super::exports::wasi::sockets::network::Ipv6SocketAddress{
        port: arg3 as u16,
        flow_info: arg4 as u32,
        address: (arg5 as u16, arg6 as u16, arg7 as u16, arg8 as u16, arg9 as u16, arg10 as u16, arg11 as u16, arg12 as u16),
        scope_id: arg13 as u32,
      };
                            V0::Ipv6(e0)
                        }
                    };
                    let result1 = T::start_bind(
                        UdpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        NetworkBorrow::lift(arg1 as u32 as usize),
                        v0,
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_finish_bind_cabi<T: GuestUdpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::finish_bind(UdpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_stream_cabi<T: GuestUdpSocket>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: i32,
                    arg10: i32,
                    arg11: i32,
                    arg12: i32,
                    arg13: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result1 = T::stream(
                        UdpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        match arg1 {
                            0 => None,
                            1 => {
                                let e = {
                                    use super::super::super::super::exports::wasi::sockets::network::IpSocketAddress as V0;
                                    let v0 = match arg2 {
                                        0 => {
                                            let e0 = super::super::super::super::exports::wasi::sockets::network::Ipv4SocketAddress{
            port: arg3 as u16,
            address: (arg4 as u8, arg5 as u8, arg6 as u8, arg7 as u8),
          };
                                            V0::Ipv4(e0)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e0 = super::super::super::super::exports::wasi::sockets::network::Ipv6SocketAddress{
            port: arg3 as u16,
            flow_info: arg4 as u32,
            address: (arg5 as u16, arg6 as u16, arg7 as u16, arg8 as u16, arg9 as u16, arg10 as u16, arg11 as u16, arg12 as u16),
            scope_id: arg13 as u32,
          };
                                            V0::Ipv6(e0)
                                        }
                                    };

                                    v0
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let (t3_0, t3_1) = e;
                            *ptr2.add(4).cast::<i32>() = (t3_0).take_handle() as i32;
                            *ptr2.add(8).cast::<i32>() = (t3_1).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_local_address_cabi<T: GuestUdpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::local_address(UdpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            use super::super::super::super::exports::wasi::sockets::network::IpSocketAddress as V6;
                            match e {
                                V6::Ipv4(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::exports::wasi::sockets::network::Ipv4SocketAddress{ port:port2, address:address2, } = e;
                                    *ptr1.add(8).cast::<u16>() = (_rt::as_i32(port2)) as u16;
                                    let (t3_0, t3_1, t3_2, t3_3) = address2;
                                    *ptr1.add(10).cast::<u8>() = (_rt::as_i32(t3_0)) as u8;
                                    *ptr1.add(11).cast::<u8>() = (_rt::as_i32(t3_1)) as u8;
                                    *ptr1.add(12).cast::<u8>() = (_rt::as_i32(t3_2)) as u8;
                                    *ptr1.add(13).cast::<u8>() = (_rt::as_i32(t3_3)) as u8;
                                }
                                V6::Ipv6(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::exports::wasi::sockets::network::Ipv6SocketAddress{ port:port4, flow_info:flow_info4, address:address4, scope_id:scope_id4, } = e;
                                    *ptr1.add(8).cast::<u16>() = (_rt::as_i32(port4)) as u16;
                                    *ptr1.add(12).cast::<i32>() = _rt::as_i32(flow_info4);
                                    let (t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7) = address4;
                                    *ptr1.add(16).cast::<u16>() = (_rt::as_i32(t5_0)) as u16;
                                    *ptr1.add(18).cast::<u16>() = (_rt::as_i32(t5_1)) as u16;
                                    *ptr1.add(20).cast::<u16>() = (_rt::as_i32(t5_2)) as u16;
                                    *ptr1.add(22).cast::<u16>() = (_rt::as_i32(t5_3)) as u16;
                                    *ptr1.add(24).cast::<u16>() = (_rt::as_i32(t5_4)) as u16;
                                    *ptr1.add(26).cast::<u16>() = (_rt::as_i32(t5_5)) as u16;
                                    *ptr1.add(28).cast::<u16>() = (_rt::as_i32(t5_6)) as u16;
                                    *ptr1.add(30).cast::<u16>() = (_rt::as_i32(t5_7)) as u16;
                                    *ptr1.add(32).cast::<i32>() = _rt::as_i32(scope_id4);
                                }
                            }
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_remote_address_cabi<T: GuestUdpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::remote_address(UdpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            use super::super::super::super::exports::wasi::sockets::network::IpSocketAddress as V6;
                            match e {
                                V6::Ipv4(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::exports::wasi::sockets::network::Ipv4SocketAddress{ port:port2, address:address2, } = e;
                                    *ptr1.add(8).cast::<u16>() = (_rt::as_i32(port2)) as u16;
                                    let (t3_0, t3_1, t3_2, t3_3) = address2;
                                    *ptr1.add(10).cast::<u8>() = (_rt::as_i32(t3_0)) as u8;
                                    *ptr1.add(11).cast::<u8>() = (_rt::as_i32(t3_1)) as u8;
                                    *ptr1.add(12).cast::<u8>() = (_rt::as_i32(t3_2)) as u8;
                                    *ptr1.add(13).cast::<u8>() = (_rt::as_i32(t3_3)) as u8;
                                }
                                V6::Ipv6(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::exports::wasi::sockets::network::Ipv6SocketAddress{ port:port4, flow_info:flow_info4, address:address4, scope_id:scope_id4, } = e;
                                    *ptr1.add(8).cast::<u16>() = (_rt::as_i32(port4)) as u16;
                                    *ptr1.add(12).cast::<i32>() = _rt::as_i32(flow_info4);
                                    let (t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7) = address4;
                                    *ptr1.add(16).cast::<u16>() = (_rt::as_i32(t5_0)) as u16;
                                    *ptr1.add(18).cast::<u16>() = (_rt::as_i32(t5_1)) as u16;
                                    *ptr1.add(20).cast::<u16>() = (_rt::as_i32(t5_2)) as u16;
                                    *ptr1.add(22).cast::<u16>() = (_rt::as_i32(t5_3)) as u16;
                                    *ptr1.add(24).cast::<u16>() = (_rt::as_i32(t5_4)) as u16;
                                    *ptr1.add(26).cast::<u16>() = (_rt::as_i32(t5_5)) as u16;
                                    *ptr1.add(28).cast::<u16>() = (_rt::as_i32(t5_6)) as u16;
                                    *ptr1.add(30).cast::<u16>() = (_rt::as_i32(t5_7)) as u16;
                                    *ptr1.add(32).cast::<i32>() = _rt::as_i32(scope_id4);
                                }
                            }
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_address_family_cabi<T: GuestUdpSocket>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::address_family(UdpSocketBorrow::lift(arg0 as u32 as usize).get());
                    result0.clone() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_unicast_hop_limit_cabi<
                    T: GuestUdpSocket,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::unicast_hop_limit(UdpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (_rt::as_i32(e)) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_set_unicast_hop_limit_cabi<
                    T: GuestUdpSocket,
                >(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_unicast_hop_limit(
                        UdpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u8,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_receive_buffer_size_cabi<
                    T: GuestUdpSocket,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::receive_buffer_size(UdpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_set_receive_buffer_size_cabi<
                    T: GuestUdpSocket,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_receive_buffer_size(
                        UdpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_send_buffer_size_cabi<T: GuestUdpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::send_buffer_size(UdpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_set_send_buffer_size_cabi<
                    T: GuestUdpSocket,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_send_buffer_size(
                        UdpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_udp_socket_subscribe_cabi<T: GuestUdpSocket>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(UdpSocketBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_incoming_datagram_stream_receive_cabi<
                    T: GuestIncomingDatagramStream,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::receive(
                        IncomingDatagramStreamBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec9 = e;
                            let len9 = vec9.len();
                            let layout9 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec9.len() * 40, 4);
                            let result9 = if layout9.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout9);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec9.into_iter().enumerate() {
                                let base = result9.add(i * 40);
                                {
                                    let IncomingDatagram {
                                        data: data2,
                                        remote_address: remote_address2,
                                    } = e;
                                    let vec3 = (data2).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *base.add(4).cast::<usize>() = len3;
                                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    use super::super::super::super::exports::wasi::sockets::network::IpSocketAddress as V8;
                                    match remote_address2 {
                                        V8::Ipv4(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::exports::wasi::sockets::network::Ipv4SocketAddress{ port:port4, address:address4, } = e;
                                            *base.add(12).cast::<u16>() =
                                                (_rt::as_i32(port4)) as u16;
                                            let (t5_0, t5_1, t5_2, t5_3) = address4;
                                            *base.add(14).cast::<u8>() = (_rt::as_i32(t5_0)) as u8;
                                            *base.add(15).cast::<u8>() = (_rt::as_i32(t5_1)) as u8;
                                            *base.add(16).cast::<u8>() = (_rt::as_i32(t5_2)) as u8;
                                            *base.add(17).cast::<u8>() = (_rt::as_i32(t5_3)) as u8;
                                        }
                                        V8::Ipv6(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::exports::wasi::sockets::network::Ipv6SocketAddress{ port:port6, flow_info:flow_info6, address:address6, scope_id:scope_id6, } = e;
                                            *base.add(12).cast::<u16>() =
                                                (_rt::as_i32(port6)) as u16;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(flow_info6);
                                            let (t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7) =
                                                address6;
                                            *base.add(20).cast::<u16>() =
                                                (_rt::as_i32(t7_0)) as u16;
                                            *base.add(22).cast::<u16>() =
                                                (_rt::as_i32(t7_1)) as u16;
                                            *base.add(24).cast::<u16>() =
                                                (_rt::as_i32(t7_2)) as u16;
                                            *base.add(26).cast::<u16>() =
                                                (_rt::as_i32(t7_3)) as u16;
                                            *base.add(28).cast::<u16>() =
                                                (_rt::as_i32(t7_4)) as u16;
                                            *base.add(30).cast::<u16>() =
                                                (_rt::as_i32(t7_5)) as u16;
                                            *base.add(32).cast::<u16>() =
                                                (_rt::as_i32(t7_6)) as u16;
                                            *base.add(34).cast::<u16>() =
                                                (_rt::as_i32(t7_7)) as u16;
                                            *base.add(36).cast::<i32>() = _rt::as_i32(scope_id6);
                                        }
                                    }
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len9;
                            *ptr1.add(4).cast::<*mut u8>() = result9;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_incoming_datagram_stream_receive<
                    T: GuestIncomingDatagramStream,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            let base6 = l4;
                            let len6 = l5;
                            for i in 0..len6 {
                                let base = base6.add(i * 40);
                                {
                                    let l1 = *base.add(0).cast::<*mut u8>();
                                    let l2 = *base.add(4).cast::<usize>();
                                    let base3 = l1;
                                    let len3 = l2;
                                    _rt::cabi_dealloc(base3, len3 * 1, 1);
                                }
                            }
                            _rt::cabi_dealloc(base6, len6 * 40, 4);
                        }
                        _ => (),
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_incoming_datagram_stream_subscribe_cabi<
                    T: GuestIncomingDatagramStream,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        IncomingDatagramStreamBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_outgoing_datagram_stream_check_send_cabi<
                    T: GuestOutgoingDatagramStream,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::check_send(
                        OutgoingDatagramStreamBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_outgoing_datagram_stream_send_cabi<
                    T: GuestOutgoingDatagramStream,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base22 = arg1;
                    let len22 = arg2;
                    let mut result22 = _rt::Vec::with_capacity(len22);
                    for i in 0..len22 {
                        let base = base22.add(i * 44);
                        let e22 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let l3 = i32::from(*base.add(8).cast::<u8>());

                            OutgoingDatagram {
                                data: _rt::Vec::from_raw_parts(l0.cast(), len2, len2),
                                remote_address: match l3 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l4 = i32::from(*base.add(12).cast::<u8>());
                                            use super::super::super::super::exports::wasi::sockets::network::IpSocketAddress as V21;
                                            let v21 = match l4 {
                                                0 => {
                                                    let e21 = {
                                                        let l5 =
                                                            i32::from(*base.add(16).cast::<u16>());
                                                        let l6 =
                                                            i32::from(*base.add(18).cast::<u8>());
                                                        let l7 =
                                                            i32::from(*base.add(19).cast::<u8>());
                                                        let l8 =
                                                            i32::from(*base.add(20).cast::<u8>());
                                                        let l9 =
                                                            i32::from(*base.add(21).cast::<u8>());

                                                        super::super::super::super::exports::wasi::sockets::network::Ipv4SocketAddress{
                    port: l5 as u16,
                    address: (l6 as u8, l7 as u8, l8 as u8, l9 as u8),
                  }
                                                    };
                                                    V21::Ipv4(e21)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 1,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e21 = {
                                                        let l10 =
                                                            i32::from(*base.add(16).cast::<u16>());
                                                        let l11 = *base.add(20).cast::<i32>();
                                                        let l12 =
                                                            i32::from(*base.add(24).cast::<u16>());
                                                        let l13 =
                                                            i32::from(*base.add(26).cast::<u16>());
                                                        let l14 =
                                                            i32::from(*base.add(28).cast::<u16>());
                                                        let l15 =
                                                            i32::from(*base.add(30).cast::<u16>());
                                                        let l16 =
                                                            i32::from(*base.add(32).cast::<u16>());
                                                        let l17 =
                                                            i32::from(*base.add(34).cast::<u16>());
                                                        let l18 =
                                                            i32::from(*base.add(36).cast::<u16>());
                                                        let l19 =
                                                            i32::from(*base.add(38).cast::<u16>());
                                                        let l20 = *base.add(40).cast::<i32>();

                                                        super::super::super::super::exports::wasi::sockets::network::Ipv6SocketAddress{
                    port: l10 as u16,
                    flow_info: l11 as u32,
                    address: (l12 as u16, l13 as u16, l14 as u16, l15 as u16, l16 as u16, l17 as u16, l18 as u16, l19 as u16),
                    scope_id: l20 as u32,
                  }
                                                    };
                                                    V21::Ipv6(e21)
                                                }
                                            };

                                            v21
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result22.push(e22);
                    }
                    _rt::cabi_dealloc(base22, len22 * 44, 4);
                    let result23 = T::send(
                        OutgoingDatagramStreamBorrow::lift(arg0 as u32 as usize).get(),
                        result22,
                    );
                    let ptr24 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result23 {
                        Ok(e) => {
                            *ptr24.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr24.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr24.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr24.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr24
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_outgoing_datagram_stream_subscribe_cabi<
                    T: GuestOutgoingDatagramStream,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        OutgoingDatagramStreamBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                pub trait Guest {
                    type UdpSocket: GuestUdpSocket;
                    type IncomingDatagramStream: GuestIncomingDatagramStream;
                    type OutgoingDatagramStream: GuestOutgoingDatagramStream;
                }
                pub trait GuestUdpSocket: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/udp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-new]udp-socket"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/udp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]udp-socket"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    /// Bind the socket to a specific network on the provided IP address and port.
                    ///
                    /// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which
                    /// network interface(s) to bind to.
                    /// If the port is zero, the socket will be bound to a random free port.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:          The `local-address` has the wrong address family. (EAFNOSUPPORT, EFAULT on Windows)
                    /// - `invalid-state`:             The socket is already bound. (EINVAL)
                    /// - `address-in-use`:            No ephemeral ports available. (EADDRINUSE, ENOBUFS on Windows)
                    /// - `address-in-use`:            Address is already in use. (EADDRINUSE)
                    /// - `address-not-bindable`:      `local-address` is not an address that the `network` can bind to. (EADDRNOTAVAIL)
                    /// - `not-in-progress`:           A `bind` operation is not in progress.
                    /// - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)
                    ///
                    /// # Implementors note
                    /// Unlike in POSIX, in WASI the bind operation is async. This enables
                    /// interactive WASI hosts to inject permission prompts. Runtimes that
                    /// don't want to make use of this ability can simply call the native
                    /// `bind` as part of either `start-bind` or `finish-bind`.
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html>
                    /// - <https://man7.org/linux/man-pages/man2/bind.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-bind>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=bind&sektion=2&format=html>
                    fn start_bind(
                        &self,
                        network: NetworkBorrow<'_>,
                        local_address: IpSocketAddress,
                    ) -> Result<(), ErrorCode>;
                    fn finish_bind(&self) -> Result<(), ErrorCode>;
                    /// Set up inbound & outbound communication channels, optionally to a specific peer.
                    ///
                    /// This function only changes the local socket configuration and does not generate any network traffic.
                    /// On success, the `remote-address` of the socket is updated. The `local-address` may be updated as well,
                    /// based on the best network path to `remote-address`.
                    ///
                    /// When a `remote-address` is provided, the returned streams are limited to communicating with that specific peer:
                    /// - `send` can only be used to send to this destination.
                    /// - `receive` will only return datagrams sent from the provided `remote-address`.
                    ///
                    /// This method may be called multiple times on the same socket to change its association, but
                    /// only the most recently returned pair of streams will be operational. Implementations may trap if
                    /// the streams returned by a previous invocation haven't been dropped yet before calling `stream` again.
                    ///
                    /// The POSIX equivalent in pseudo-code is:
                    /// ```text
                    /// if (was previously connected) {
                    /// connect(s, AF_UNSPEC)
                    /// }
                    /// if (remote_address is Some) {
                    /// connect(s, remote_address)
                    /// }
                    /// ```
                    ///
                    /// Unlike in POSIX, the socket must already be explicitly bound.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:          The `remote-address` has the wrong address family. (EAFNOSUPPORT)
                    /// - `invalid-argument`:          The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EDESTADDRREQ, EADDRNOTAVAIL)
                    /// - `invalid-argument`:          The port in `remote-address` is set to 0. (EDESTADDRREQ, EADDRNOTAVAIL)
                    /// - `invalid-state`:             The socket is not bound.
                    /// - `address-in-use`:            Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE, EADDRNOTAVAIL on Linux, EAGAIN on BSD)
                    /// - `remote-unreachable`:        The remote address is not reachable. (ECONNRESET, ENETRESET, EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN, ENONET)
                    /// - `connection-refused`:        The connection was refused. (ECONNREFUSED)
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html>
                    /// - <https://man7.org/linux/man-pages/man2/connect.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>
                    /// - <https://man.freebsd.org/cgi/man.cgi?connect>
                    fn stream(
                        &self,
                        remote_address: Option<IpSocketAddress>,
                    ) -> Result<(IncomingDatagramStream, OutgoingDatagramStream), ErrorCode>;
                    /// Get the current bound address.
                    ///
                    /// POSIX mentions:
                    /// > If the socket has not been bound to a local name, the value
                    /// > stored in the object pointed to by `address` is unspecified.
                    ///
                    /// WASI is stricter and requires `local-address` to return `invalid-state` when the socket hasn't been bound yet.
                    ///
                    /// # Typical errors
                    /// - `invalid-state`: The socket is not bound to any local address.
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html>
                    /// - <https://man7.org/linux/man-pages/man2/getsockname.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getsockname>
                    /// - <https://man.freebsd.org/cgi/man.cgi?getsockname>
                    fn local_address(&self) -> Result<IpSocketAddress, ErrorCode>;
                    /// Get the address the socket is currently streaming to.
                    ///
                    /// # Typical errors
                    /// - `invalid-state`: The socket is not streaming to a specific remote address. (ENOTCONN)
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html>
                    /// - <https://man7.org/linux/man-pages/man2/getpeername.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getpeername>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2&n=1>
                    fn remote_address(&self) -> Result<IpSocketAddress, ErrorCode>;
                    /// Whether this is a IPv4 or IPv6 socket.
                    ///
                    /// Equivalent to the SO_DOMAIN socket option.
                    fn address_family(&self) -> IpAddressFamily;
                    /// Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.
                    ///
                    /// If the provided value is 0, an `invalid-argument` error is returned.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:     (set) The TTL value must be 1 or higher.
                    fn unicast_hop_limit(&self) -> Result<u8, ErrorCode>;
                    fn set_unicast_hop_limit(&self, value: u8) -> Result<(), ErrorCode>;
                    /// The kernel buffer space reserved for sends/receives on this socket.
                    ///
                    /// If the provided value is 0, an `invalid-argument` error is returned.
                    /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
                    /// I.e. after setting a value, reading the same setting back may return a different value.
                    ///
                    /// Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:     (set) The provided value was 0.
                    fn receive_buffer_size(&self) -> Result<u64, ErrorCode>;
                    fn set_receive_buffer_size(&self, value: u64) -> Result<(), ErrorCode>;
                    fn send_buffer_size(&self) -> Result<u64, ErrorCode>;
                    fn set_send_buffer_size(&self, value: u64) -> Result<(), ErrorCode>;
                    /// Create a `pollable` which will resolve once the socket is ready for I/O.
                    ///
                    /// Note: this function is here for WASI Preview2 only.
                    /// It's planned to be removed when `future` is natively supported in Preview3.
                    fn subscribe(&self) -> Pollable;
                }
                pub trait GuestIncomingDatagramStream: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/udp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-new]incoming-datagram-stream"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/udp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]incoming-datagram-stream"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    /// Receive messages on the socket.
                    ///
                    /// This function attempts to receive up to `max-results` datagrams on the socket without blocking.
                    /// The returned list may contain fewer elements than requested, but never more.
                    ///
                    /// This function returns successfully with an empty list when either:
                    /// - `max-results` is 0, or:
                    /// - `max-results` is greater than 0, but no results are immediately available.
                    /// This function never returns `error(would-block)`.
                    ///
                    /// # Typical errors
                    /// - `remote-unreachable`: The remote address is not reachable. (ECONNRESET, ENETRESET on Windows, EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN, ENONET)
                    /// - `connection-refused`: The connection was refused. (ECONNREFUSED)
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvfrom.html>
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvmsg.html>
                    /// - <https://man7.org/linux/man-pages/man2/recv.2.html>
                    /// - <https://man7.org/linux/man-pages/man2/recvmmsg.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-recv>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-recvfrom>
                    /// - <https://learn.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms741687(v=vs.85)>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=recv&sektion=2>
                    fn receive(
                        &self,
                        max_results: u64,
                    ) -> Result<_rt::Vec<IncomingDatagram>, ErrorCode>;
                    /// Create a `pollable` which will resolve once the stream is ready to receive again.
                    ///
                    /// Note: this function is here for WASI Preview2 only.
                    /// It's planned to be removed when `future` is natively supported in Preview3.
                    fn subscribe(&self) -> Pollable;
                }
                pub trait GuestOutgoingDatagramStream: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/udp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-new]outgoing-datagram-stream"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/udp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]outgoing-datagram-stream"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    /// Check readiness for sending. This function never blocks.
                    ///
                    /// Returns the number of datagrams permitted for the next call to `send`,
                    /// or an error. Calling `send` with more datagrams than this function has
                    /// permitted will trap.
                    ///
                    /// When this function returns ok(0), the `subscribe` pollable will
                    /// become ready when this function will report at least ok(1), or an
                    /// error.
                    ///
                    /// Never returns `would-block`.
                    fn check_send(&self) -> Result<u64, ErrorCode>;
                    /// Send messages on the socket.
                    ///
                    /// This function attempts to send all provided `datagrams` on the socket without blocking and
                    /// returns how many messages were actually sent (or queued for sending). This function never
                    /// returns `error(would-block)`. If none of the datagrams were able to be sent, `ok(0)` is returned.
                    ///
                    /// This function semantically behaves the same as iterating the `datagrams` list and sequentially
                    /// sending each individual datagram until either the end of the list has been reached or the first error occurred.
                    /// If at least one datagram has been sent successfully, this function never returns an error.
                    ///
                    /// If the input list is empty, the function returns `ok(0)`.
                    ///
                    /// Each call to `send` must be permitted by a preceding `check-send`. Implementations must trap if
                    /// either `check-send` was not called or `datagrams` contains more items than `check-send` permitted.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:        The `remote-address` has the wrong address family. (EAFNOSUPPORT)
                    /// - `invalid-argument`:        The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EDESTADDRREQ, EADDRNOTAVAIL)
                    /// - `invalid-argument`:        The port in `remote-address` is set to 0. (EDESTADDRREQ, EADDRNOTAVAIL)
                    /// - `invalid-argument`:        The socket is in "connected" mode and `remote-address` is `some` value that does not match the address passed to `stream`. (EISCONN)
                    /// - `invalid-argument`:        The socket is not "connected" and no value for `remote-address` was provided. (EDESTADDRREQ)
                    /// - `remote-unreachable`:      The remote address is not reachable. (ECONNRESET, ENETRESET on Windows, EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN, ENONET)
                    /// - `connection-refused`:      The connection was refused. (ECONNREFUSED)
                    /// - `datagram-too-large`:      The datagram is too large. (EMSGSIZE)
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendto.html>
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendmsg.html>
                    /// - <https://man7.org/linux/man-pages/man2/send.2.html>
                    /// - <https://man7.org/linux/man-pages/man2/sendmmsg.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendto>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasendmsg>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=send&sektion=2>
                    fn send(&self, datagrams: _rt::Vec<OutgoingDatagram>)
                        -> Result<u64, ErrorCode>;
                    /// Create a `pollable` which will resolve once the stream is ready to send again.
                    ///
                    /// Note: this function is here for WASI Preview2 only.
                    /// It's planned to be removed when `future` is natively supported in Preview3.
                    fn subscribe(&self) -> Pollable;
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_sockets_udp_0_2_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.start-bind"]
    unsafe extern "C" fn export_method_udp_socket_start_bind(arg0: *mut u8,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,arg9: i32,arg10: i32,arg11: i32,arg12: i32,arg13: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_start_bind_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.finish-bind"]
    unsafe extern "C" fn export_method_udp_socket_finish_bind(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_finish_bind_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.stream"]
    unsafe extern "C" fn export_method_udp_socket_stream(arg0: *mut u8,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,arg9: i32,arg10: i32,arg11: i32,arg12: i32,arg13: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_stream_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.local-address"]
    unsafe extern "C" fn export_method_udp_socket_local_address(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_local_address_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.remote-address"]
    unsafe extern "C" fn export_method_udp_socket_remote_address(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_remote_address_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.address-family"]
    unsafe extern "C" fn export_method_udp_socket_address_family(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_udp_socket_address_family_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.unicast-hop-limit"]
    unsafe extern "C" fn export_method_udp_socket_unicast_hop_limit(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_unicast_hop_limit_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.set-unicast-hop-limit"]
    unsafe extern "C" fn export_method_udp_socket_set_unicast_hop_limit(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_set_unicast_hop_limit_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.receive-buffer-size"]
    unsafe extern "C" fn export_method_udp_socket_receive_buffer_size(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_receive_buffer_size_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.set-receive-buffer-size"]
    unsafe extern "C" fn export_method_udp_socket_set_receive_buffer_size(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_set_receive_buffer_size_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.send-buffer-size"]
    unsafe extern "C" fn export_method_udp_socket_send_buffer_size(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_send_buffer_size_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.set-send-buffer-size"]
    unsafe extern "C" fn export_method_udp_socket_set_send_buffer_size(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_udp_socket_set_send_buffer_size_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]udp-socket.subscribe"]
    unsafe extern "C" fn export_method_udp_socket_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_udp_socket_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::UdpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]incoming-datagram-stream.receive"]
    unsafe extern "C" fn export_method_incoming_datagram_stream_receive(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_incoming_datagram_stream_receive_cabi::<<$ty as $($path_to_types)*::Guest>::IncomingDatagramStream>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:sockets/udp@0.2.0#[method]incoming-datagram-stream.receive"]
    unsafe extern "C" fn _post_return_method_incoming_datagram_stream_receive(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_incoming_datagram_stream_receive::<<$ty as $($path_to_types)*::Guest>::IncomingDatagramStream>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]incoming-datagram-stream.subscribe"]
    unsafe extern "C" fn export_method_incoming_datagram_stream_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_incoming_datagram_stream_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::IncomingDatagramStream>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]outgoing-datagram-stream.check-send"]
    unsafe extern "C" fn export_method_outgoing_datagram_stream_check_send(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_outgoing_datagram_stream_check_send_cabi::<<$ty as $($path_to_types)*::Guest>::OutgoingDatagramStream>(arg0)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]outgoing-datagram-stream.send"]
    unsafe extern "C" fn export_method_outgoing_datagram_stream_send(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_outgoing_datagram_stream_send_cabi::<<$ty as $($path_to_types)*::Guest>::OutgoingDatagramStream>(arg0, arg1, arg2)
    }
    #[export_name = "wasi:sockets/udp@0.2.0#[method]outgoing-datagram-stream.subscribe"]
    unsafe extern "C" fn export_method_outgoing_datagram_stream_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_outgoing_datagram_stream_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::OutgoingDatagramStream>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "wasi:sockets/udp@0.2.0#[dtor]udp-socket"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::UdpSocket::dtor::<
        <$ty as $($path_to_types)*::Guest>::UdpSocket
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "wasi:sockets/udp@0.2.0#[dtor]incoming-datagram-stream"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::IncomingDatagramStream::dtor::<
        <$ty as $($path_to_types)*::Guest>::IncomingDatagramStream
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "wasi:sockets/udp@0.2.0#[dtor]outgoing-datagram-stream"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::OutgoingDatagramStream::dtor::<
        <$ty as $($path_to_types)*::Guest>::OutgoingDatagramStream
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_wasi_sockets_udp_0_2_0_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 36]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 36]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod udp_create_socket {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type NetworkBorrow<'a> =
                    super::super::super::super::exports::wasi::sockets::network::NetworkBorrow<'a>;
                pub type ErrorCode =
                    super::super::super::super::exports::wasi::sockets::network::ErrorCode;
                pub type IpAddressFamily =
                    super::super::super::super::exports::wasi::sockets::network::IpAddressFamily;
                pub type UdpSocket =
                    super::super::super::super::exports::wasi::sockets::udp::UdpSocket;
                pub type UdpSocketBorrow<'a> =
                    super::super::super::super::exports::wasi::sockets::udp::UdpSocketBorrow<'a>;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_create_udp_socket_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::create_udp_socket(super::super::super::super::exports::wasi::sockets::network::IpAddressFamily::_lift(arg0 as u8));
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                pub trait Guest {
                    /// Create a new UDP socket.
                    ///
                    /// Similar to `socket(AF_INET or AF_INET6, SOCK_DGRAM, IPPROTO_UDP)` in POSIX.
                    /// On IPv6 sockets, IPV6_V6ONLY is enabled by default and can't be configured otherwise.
                    ///
                    /// This function does not require a network capability handle. This is considered to be safe because
                    /// at time of creation, the socket is not bound to any `network` yet. Up to the moment `bind` is called,
                    /// the socket is effectively an in-memory configuration object, unable to communicate with the outside world.
                    ///
                    /// All sockets are non-blocking. Use the wasi-poll interface to block on asynchronous operations.
                    ///
                    /// # Typical errors
                    /// - `not-supported`:     The specified `address-family` is not supported. (EAFNOSUPPORT)
                    /// - `new-socket-limit`:  The new socket resource could not be created because of a system limit. (EMFILE, ENFILE)
                    ///
                    /// # References:
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html>
                    /// - <https://man7.org/linux/man-pages/man2/socket.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasocketw>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=socket&sektion=2>
                    fn create_udp_socket(
                        address_family: IpAddressFamily,
                    ) -> Result<UdpSocket, ErrorCode>;
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_sockets_udp_create_socket_0_2_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "wasi:sockets/udp-create-socket@0.2.0#create-udp-socket"]
    unsafe extern "C" fn export_create_udp_socket(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_create_udp_socket_cabi::<$ty>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_wasi_sockets_udp_create_socket_0_2_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod tcp {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type InputStream = super::super::super::super::wasi::io::streams::InputStream;
                pub type OutputStream = super::super::super::super::wasi::io::streams::OutputStream;
                pub type Pollable = super::super::super::super::wasi::io::poll::Pollable;
                pub type Duration =
                    super::super::super::super::wasi::clocks::monotonic_clock::Duration;
                pub type Network =
                    super::super::super::super::exports::wasi::sockets::network::Network;
                pub type NetworkBorrow<'a> =
                    super::super::super::super::exports::wasi::sockets::network::NetworkBorrow<'a>;
                pub type ErrorCode =
                    super::super::super::super::exports::wasi::sockets::network::ErrorCode;
                pub type IpSocketAddress =
                    super::super::super::super::exports::wasi::sockets::network::IpSocketAddress;
                pub type IpAddressFamily =
                    super::super::super::super::exports::wasi::sockets::network::IpAddressFamily;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum ShutdownType {
                    /// Similar to `SHUT_RD` in POSIX.
                    Receive,
                    /// Similar to `SHUT_WR` in POSIX.
                    Send,
                    /// Similar to `SHUT_RDWR` in POSIX.
                    Both,
                }
                impl ::core::fmt::Debug for ShutdownType {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            ShutdownType::Receive => {
                                f.debug_tuple("ShutdownType::Receive").finish()
                            }
                            ShutdownType::Send => f.debug_tuple("ShutdownType::Send").finish(),
                            ShutdownType::Both => f.debug_tuple("ShutdownType::Both").finish(),
                        }
                    }
                }

                impl ShutdownType {
                    pub(crate) unsafe fn _lift(val: u8) -> ShutdownType {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => ShutdownType::Receive,
                            1 => ShutdownType::Send,
                            2 => ShutdownType::Both,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                /// A TCP socket resource.
                ///
                /// The socket can be in one of the following states:
                /// - `unbound`
                /// - `bind-in-progress`
                /// - `bound` (See note below)
                /// - `listen-in-progress`
                /// - `listening`
                /// - `connect-in-progress`
                /// - `connected`
                /// - `closed`
                /// See <https://github.com/WebAssembly/wasi-sockets/TcpSocketOperationalSemantics.md>
                /// for a more information.
                ///
                /// Note: Except where explicitly mentioned, whenever this documentation uses
                /// the term "bound" without backticks it actually means: in the `bound` state *or higher*.
                /// (i.e. `bound`, `listen-in-progress`, `listening`, `connect-in-progress` or `connected`)
                ///
                /// In addition to the general error codes documented on the
                /// `network::error-code` type, TCP socket methods may always return
                /// `error(invalid-state)` when in the `closed` state.

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TcpSocket {
                    handle: _rt::Resource<TcpSocket>,
                }

                type _TcpSocketRep<T> = Option<T>;

                impl TcpSocket {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `TcpSocket`.
                    pub fn new<T: GuestTcpSocket>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _TcpSocketRep<T> = Some(val);
                        let ptr: *mut _TcpSocketRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestTcpSocket>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestTcpSocket>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestTcpSocket>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestTcpSocket` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _TcpSocketRep<T>);
                    }

                    fn as_ptr<T: GuestTcpSocket>(&self) -> *mut _TcpSocketRep<T> {
                        TcpSocket::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`TcpSocket`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TcpSocketBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a TcpSocket>,
                }

                impl<'a> TcpSocketBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestTcpSocket>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _TcpSocketRep<T> {
                        TcpSocket::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for TcpSocket {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/tcp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]tcp-socket"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_start_bind_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: i32,
                    arg10: i32,
                    arg11: i32,
                    arg12: i32,
                    arg13: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    use super::super::super::super::exports::wasi::sockets::network::IpSocketAddress as V0;
                    let v0 = match arg2 {
                        0 => {
                            let e0 = super::super::super::super::exports::wasi::sockets::network::Ipv4SocketAddress{
        port: arg3 as u16,
        address: (arg4 as u8, arg5 as u8, arg6 as u8, arg7 as u8),
      };
                            V0::Ipv4(e0)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e0 = super::super::super::super::exports::wasi::sockets::network::Ipv6SocketAddress{
        port: arg3 as u16,
        flow_info: arg4 as u32,
        address: (arg5 as u16, arg6 as u16, arg7 as u16, arg8 as u16, arg9 as u16, arg10 as u16, arg11 as u16, arg12 as u16),
        scope_id: arg13 as u32,
      };
                            V0::Ipv6(e0)
                        }
                    };
                    let result1 = T::start_bind(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        NetworkBorrow::lift(arg1 as u32 as usize),
                        v0,
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_finish_bind_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::finish_bind(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_start_connect_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: i32,
                    arg10: i32,
                    arg11: i32,
                    arg12: i32,
                    arg13: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    use super::super::super::super::exports::wasi::sockets::network::IpSocketAddress as V0;
                    let v0 = match arg2 {
                        0 => {
                            let e0 = super::super::super::super::exports::wasi::sockets::network::Ipv4SocketAddress{
      port: arg3 as u16,
      address: (arg4 as u8, arg5 as u8, arg6 as u8, arg7 as u8),
    };
                            V0::Ipv4(e0)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e0 = super::super::super::super::exports::wasi::sockets::network::Ipv6SocketAddress{
      port: arg3 as u16,
      flow_info: arg4 as u32,
      address: (arg5 as u16, arg6 as u16, arg7 as u16, arg8 as u16, arg9 as u16, arg10 as u16, arg11 as u16, arg12 as u16),
      scope_id: arg13 as u32,
    };
                            V0::Ipv6(e0)
                        }
                    };
                    let result1 = T::start_connect(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        NetworkBorrow::lift(arg1 as u32 as usize),
                        v0,
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_finish_connect_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::finish_connect(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let (t2_0, t2_1) = e;
                            *ptr1.add(4).cast::<i32>() = (t2_0).take_handle() as i32;
                            *ptr1.add(8).cast::<i32>() = (t2_1).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_start_listen_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::start_listen(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_finish_listen_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::finish_listen(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_accept_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::accept(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let (t2_0, t2_1, t2_2) = e;
                            *ptr1.add(4).cast::<i32>() = (t2_0).take_handle() as i32;
                            *ptr1.add(8).cast::<i32>() = (t2_1).take_handle() as i32;
                            *ptr1.add(12).cast::<i32>() = (t2_2).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_local_address_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::local_address(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            use super::super::super::super::exports::wasi::sockets::network::IpSocketAddress as V6;
                            match e {
                                V6::Ipv4(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::exports::wasi::sockets::network::Ipv4SocketAddress{ port:port2, address:address2, } = e;
                                    *ptr1.add(8).cast::<u16>() = (_rt::as_i32(port2)) as u16;
                                    let (t3_0, t3_1, t3_2, t3_3) = address2;
                                    *ptr1.add(10).cast::<u8>() = (_rt::as_i32(t3_0)) as u8;
                                    *ptr1.add(11).cast::<u8>() = (_rt::as_i32(t3_1)) as u8;
                                    *ptr1.add(12).cast::<u8>() = (_rt::as_i32(t3_2)) as u8;
                                    *ptr1.add(13).cast::<u8>() = (_rt::as_i32(t3_3)) as u8;
                                }
                                V6::Ipv6(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::exports::wasi::sockets::network::Ipv6SocketAddress{ port:port4, flow_info:flow_info4, address:address4, scope_id:scope_id4, } = e;
                                    *ptr1.add(8).cast::<u16>() = (_rt::as_i32(port4)) as u16;
                                    *ptr1.add(12).cast::<i32>() = _rt::as_i32(flow_info4);
                                    let (t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7) = address4;
                                    *ptr1.add(16).cast::<u16>() = (_rt::as_i32(t5_0)) as u16;
                                    *ptr1.add(18).cast::<u16>() = (_rt::as_i32(t5_1)) as u16;
                                    *ptr1.add(20).cast::<u16>() = (_rt::as_i32(t5_2)) as u16;
                                    *ptr1.add(22).cast::<u16>() = (_rt::as_i32(t5_3)) as u16;
                                    *ptr1.add(24).cast::<u16>() = (_rt::as_i32(t5_4)) as u16;
                                    *ptr1.add(26).cast::<u16>() = (_rt::as_i32(t5_5)) as u16;
                                    *ptr1.add(28).cast::<u16>() = (_rt::as_i32(t5_6)) as u16;
                                    *ptr1.add(30).cast::<u16>() = (_rt::as_i32(t5_7)) as u16;
                                    *ptr1.add(32).cast::<i32>() = _rt::as_i32(scope_id4);
                                }
                            }
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_remote_address_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::remote_address(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            use super::super::super::super::exports::wasi::sockets::network::IpSocketAddress as V6;
                            match e {
                                V6::Ipv4(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::exports::wasi::sockets::network::Ipv4SocketAddress{ port:port2, address:address2, } = e;
                                    *ptr1.add(8).cast::<u16>() = (_rt::as_i32(port2)) as u16;
                                    let (t3_0, t3_1, t3_2, t3_3) = address2;
                                    *ptr1.add(10).cast::<u8>() = (_rt::as_i32(t3_0)) as u8;
                                    *ptr1.add(11).cast::<u8>() = (_rt::as_i32(t3_1)) as u8;
                                    *ptr1.add(12).cast::<u8>() = (_rt::as_i32(t3_2)) as u8;
                                    *ptr1.add(13).cast::<u8>() = (_rt::as_i32(t3_3)) as u8;
                                }
                                V6::Ipv6(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::exports::wasi::sockets::network::Ipv6SocketAddress{ port:port4, flow_info:flow_info4, address:address4, scope_id:scope_id4, } = e;
                                    *ptr1.add(8).cast::<u16>() = (_rt::as_i32(port4)) as u16;
                                    *ptr1.add(12).cast::<i32>() = _rt::as_i32(flow_info4);
                                    let (t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7) = address4;
                                    *ptr1.add(16).cast::<u16>() = (_rt::as_i32(t5_0)) as u16;
                                    *ptr1.add(18).cast::<u16>() = (_rt::as_i32(t5_1)) as u16;
                                    *ptr1.add(20).cast::<u16>() = (_rt::as_i32(t5_2)) as u16;
                                    *ptr1.add(22).cast::<u16>() = (_rt::as_i32(t5_3)) as u16;
                                    *ptr1.add(24).cast::<u16>() = (_rt::as_i32(t5_4)) as u16;
                                    *ptr1.add(26).cast::<u16>() = (_rt::as_i32(t5_5)) as u16;
                                    *ptr1.add(28).cast::<u16>() = (_rt::as_i32(t5_6)) as u16;
                                    *ptr1.add(30).cast::<u16>() = (_rt::as_i32(t5_7)) as u16;
                                    *ptr1.add(32).cast::<i32>() = _rt::as_i32(scope_id4);
                                }
                            }
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_is_listening_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::is_listening(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_address_family_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::address_family(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    result0.clone() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_set_listen_backlog_size_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_listen_backlog_size(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_keep_alive_enabled_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::keep_alive_enabled(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_set_keep_alive_enabled_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_keep_alive_enabled(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::bool_lift(arg1 as u8),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_keep_alive_idle_time_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::keep_alive_idle_time(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_set_keep_alive_idle_time_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_keep_alive_idle_time(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_keep_alive_interval_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::keep_alive_interval(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_set_keep_alive_interval_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_keep_alive_interval(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_keep_alive_count_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::keep_alive_count(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_set_keep_alive_count_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_keep_alive_count(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u32,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_hop_limit_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::hop_limit(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (_rt::as_i32(e)) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_set_hop_limit_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_hop_limit(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u8,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_receive_buffer_size_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::receive_buffer_size(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_set_receive_buffer_size_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_receive_buffer_size(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_send_buffer_size_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::send_buffer_size(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(8).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_set_send_buffer_size_cabi<
                    T: GuestTcpSocket,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::set_send_buffer_size(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_subscribe_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(TcpSocketBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tcp_socket_shutdown_cabi<T: GuestTcpSocket>(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::shutdown(
                        TcpSocketBorrow::lift(arg0 as u32 as usize).get(),
                        ShutdownType::_lift(arg1 as u8),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                pub trait Guest {
                    type TcpSocket: GuestTcpSocket;
                }
                pub trait GuestTcpSocket: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/tcp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-new]tcp-socket"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wasi:sockets/tcp@0.2.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]tcp-socket"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    /// Bind the socket to a specific network on the provided IP address and port.
                    ///
                    /// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which
                    /// network interface(s) to bind to.
                    /// If the TCP/UDP port is zero, the socket will be bound to a random free port.
                    ///
                    /// Bind can be attempted multiple times on the same socket, even with
                    /// different arguments on each iteration. But never concurrently and
                    /// only as long as the previous bind failed. Once a bind succeeds, the
                    /// binding can't be changed anymore.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:          The `local-address` has the wrong address family. (EAFNOSUPPORT, EFAULT on Windows)
                    /// - `invalid-argument`:          `local-address` is not a unicast address. (EINVAL)
                    /// - `invalid-argument`:          `local-address` is an IPv4-mapped IPv6 address. (EINVAL)
                    /// - `invalid-state`:             The socket is already bound. (EINVAL)
                    /// - `address-in-use`:            No ephemeral ports available. (EADDRINUSE, ENOBUFS on Windows)
                    /// - `address-in-use`:            Address is already in use. (EADDRINUSE)
                    /// - `address-not-bindable`:      `local-address` is not an address that the `network` can bind to. (EADDRNOTAVAIL)
                    /// - `not-in-progress`:           A `bind` operation is not in progress.
                    /// - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)
                    ///
                    /// # Implementors note
                    /// When binding to a non-zero port, this bind operation shouldn't be affected by the TIME_WAIT
                    /// state of a recently closed socket on the same local address. In practice this means that the SO_REUSEADDR
                    /// socket option should be set implicitly on all platforms, except on Windows where this is the default behavior
                    /// and SO_REUSEADDR performs something different entirely.
                    ///
                    /// Unlike in POSIX, in WASI the bind operation is async. This enables
                    /// interactive WASI hosts to inject permission prompts. Runtimes that
                    /// don't want to make use of this ability can simply call the native
                    /// `bind` as part of either `start-bind` or `finish-bind`.
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html>
                    /// - <https://man7.org/linux/man-pages/man2/bind.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-bind>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=bind&sektion=2&format=html>
                    fn start_bind(
                        &self,
                        network: NetworkBorrow<'_>,
                        local_address: IpSocketAddress,
                    ) -> Result<(), ErrorCode>;
                    fn finish_bind(&self) -> Result<(), ErrorCode>;
                    /// Connect to a remote endpoint.
                    ///
                    /// On success:
                    /// - the socket is transitioned into the `connection` state.
                    /// - a pair of streams is returned that can be used to read & write to the connection
                    ///
                    /// After a failed connection attempt, the socket will be in the `closed`
                    /// state and the only valid action left is to `drop` the socket. A single
                    /// socket can not be used to connect more than once.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:          The `remote-address` has the wrong address family. (EAFNOSUPPORT)
                    /// - `invalid-argument`:          `remote-address` is not a unicast address. (EINVAL, ENETUNREACH on Linux, EAFNOSUPPORT on MacOS)
                    /// - `invalid-argument`:          `remote-address` is an IPv4-mapped IPv6 address. (EINVAL, EADDRNOTAVAIL on Illumos)
                    /// - `invalid-argument`:          The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EADDRNOTAVAIL on Windows)
                    /// - `invalid-argument`:          The port in `remote-address` is set to 0. (EADDRNOTAVAIL on Windows)
                    /// - `invalid-argument`:          The socket is already attached to a different network. The `network` passed to `connect` must be identical to the one passed to `bind`.
                    /// - `invalid-state`:             The socket is already in the `connected` state. (EISCONN)
                    /// - `invalid-state`:             The socket is already in the `listening` state. (EOPNOTSUPP, EINVAL on Windows)
                    /// - `timeout`:                   Connection timed out. (ETIMEDOUT)
                    /// - `connection-refused`:        The connection was forcefully rejected. (ECONNREFUSED)
                    /// - `connection-reset`:          The connection was reset. (ECONNRESET)
                    /// - `connection-aborted`:        The connection was aborted. (ECONNABORTED)
                    /// - `remote-unreachable`:        The remote address is not reachable. (EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN, ENONET)
                    /// - `address-in-use`:            Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE, EADDRNOTAVAIL on Linux, EAGAIN on BSD)
                    /// - `not-in-progress`:           A connect operation is not in progress.
                    /// - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)
                    ///
                    /// # Implementors note
                    /// The POSIX equivalent of `start-connect` is the regular `connect` syscall.
                    /// Because all WASI sockets are non-blocking this is expected to return
                    /// EINPROGRESS, which should be translated to `ok()` in WASI.
                    ///
                    /// The POSIX equivalent of `finish-connect` is a `poll` for event `POLLOUT`
                    /// with a timeout of 0 on the socket descriptor. Followed by a check for
                    /// the `SO_ERROR` socket option, in case the poll signaled readiness.
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html>
                    /// - <https://man7.org/linux/man-pages/man2/connect.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>
                    /// - <https://man.freebsd.org/cgi/man.cgi?connect>
                    fn start_connect(
                        &self,
                        network: NetworkBorrow<'_>,
                        remote_address: IpSocketAddress,
                    ) -> Result<(), ErrorCode>;
                    fn finish_connect(&self) -> Result<(InputStream, OutputStream), ErrorCode>;
                    /// Start listening for new connections.
                    ///
                    /// Transitions the socket into the `listening` state.
                    ///
                    /// Unlike POSIX, the socket must already be explicitly bound.
                    ///
                    /// # Typical errors
                    /// - `invalid-state`:             The socket is not bound to any local address. (EDESTADDRREQ)
                    /// - `invalid-state`:             The socket is already in the `connected` state. (EISCONN, EINVAL on BSD)
                    /// - `invalid-state`:             The socket is already in the `listening` state.
                    /// - `address-in-use`:            Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE)
                    /// - `not-in-progress`:           A listen operation is not in progress.
                    /// - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)
                    ///
                    /// # Implementors note
                    /// Unlike in POSIX, in WASI the listen operation is async. This enables
                    /// interactive WASI hosts to inject permission prompts. Runtimes that
                    /// don't want to make use of this ability can simply call the native
                    /// `listen` as part of either `start-listen` or `finish-listen`.
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/listen.html>
                    /// - <https://man7.org/linux/man-pages/man2/listen.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=listen&sektion=2>
                    fn start_listen(&self) -> Result<(), ErrorCode>;
                    fn finish_listen(&self) -> Result<(), ErrorCode>;
                    /// Accept a new client socket.
                    ///
                    /// The returned socket is bound and in the `connected` state. The following properties are inherited from the listener socket:
                    /// - `address-family`
                    /// - `keep-alive-enabled`
                    /// - `keep-alive-idle-time`
                    /// - `keep-alive-interval`
                    /// - `keep-alive-count`
                    /// - `hop-limit`
                    /// - `receive-buffer-size`
                    /// - `send-buffer-size`
                    ///
                    /// On success, this function returns the newly accepted client socket along with
                    /// a pair of streams that can be used to read & write to the connection.
                    ///
                    /// # Typical errors
                    /// - `invalid-state`:      Socket is not in the `listening` state. (EINVAL)
                    /// - `would-block`:        No pending connections at the moment. (EWOULDBLOCK, EAGAIN)
                    /// - `connection-aborted`: An incoming connection was pending, but was terminated by the client before this listener could accept it. (ECONNABORTED)
                    /// - `new-socket-limit`:   The new socket resource could not be created because of a system limit. (EMFILE, ENFILE)
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/accept.html>
                    /// - <https://man7.org/linux/man-pages/man2/accept.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-accept>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=accept&sektion=2>
                    fn accept(&self) -> Result<(TcpSocket, InputStream, OutputStream), ErrorCode>;
                    /// Get the bound local address.
                    ///
                    /// POSIX mentions:
                    /// > If the socket has not been bound to a local name, the value
                    /// > stored in the object pointed to by `address` is unspecified.
                    ///
                    /// WASI is stricter and requires `local-address` to return `invalid-state` when the socket hasn't been bound yet.
                    ///
                    /// # Typical errors
                    /// - `invalid-state`: The socket is not bound to any local address.
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html>
                    /// - <https://man7.org/linux/man-pages/man2/getsockname.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getsockname>
                    /// - <https://man.freebsd.org/cgi/man.cgi?getsockname>
                    fn local_address(&self) -> Result<IpSocketAddress, ErrorCode>;
                    /// Get the remote address.
                    ///
                    /// # Typical errors
                    /// - `invalid-state`: The socket is not connected to a remote address. (ENOTCONN)
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html>
                    /// - <https://man7.org/linux/man-pages/man2/getpeername.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getpeername>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2&n=1>
                    fn remote_address(&self) -> Result<IpSocketAddress, ErrorCode>;
                    /// Whether the socket is in the `listening` state.
                    ///
                    /// Equivalent to the SO_ACCEPTCONN socket option.
                    fn is_listening(&self) -> bool;
                    /// Whether this is a IPv4 or IPv6 socket.
                    ///
                    /// Equivalent to the SO_DOMAIN socket option.
                    fn address_family(&self) -> IpAddressFamily;
                    /// Hints the desired listen queue size. Implementations are free to ignore this.
                    ///
                    /// If the provided value is 0, an `invalid-argument` error is returned.
                    /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
                    ///
                    /// # Typical errors
                    /// - `not-supported`:        (set) The platform does not support changing the backlog size after the initial listen.
                    /// - `invalid-argument`:     (set) The provided value was 0.
                    /// - `invalid-state`:        (set) The socket is in the `connect-in-progress` or `connected` state.
                    fn set_listen_backlog_size(&self, value: u64) -> Result<(), ErrorCode>;
                    /// Enables or disables keepalive.
                    ///
                    /// The keepalive behavior can be adjusted using:
                    /// - `keep-alive-idle-time`
                    /// - `keep-alive-interval`
                    /// - `keep-alive-count`
                    /// These properties can be configured while `keep-alive-enabled` is false, but only come into effect when `keep-alive-enabled` is true.
                    ///
                    /// Equivalent to the SO_KEEPALIVE socket option.
                    fn keep_alive_enabled(&self) -> Result<bool, ErrorCode>;
                    fn set_keep_alive_enabled(&self, value: bool) -> Result<(), ErrorCode>;
                    /// Amount of time the connection has to be idle before TCP starts sending keepalive packets.
                    ///
                    /// If the provided value is 0, an `invalid-argument` error is returned.
                    /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
                    /// I.e. after setting a value, reading the same setting back may return a different value.
                    ///
                    /// Equivalent to the TCP_KEEPIDLE socket option. (TCP_KEEPALIVE on MacOS)
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:     (set) The provided value was 0.
                    fn keep_alive_idle_time(&self) -> Result<Duration, ErrorCode>;
                    fn set_keep_alive_idle_time(&self, value: Duration) -> Result<(), ErrorCode>;
                    /// The time between keepalive packets.
                    ///
                    /// If the provided value is 0, an `invalid-argument` error is returned.
                    /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
                    /// I.e. after setting a value, reading the same setting back may return a different value.
                    ///
                    /// Equivalent to the TCP_KEEPINTVL socket option.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:     (set) The provided value was 0.
                    fn keep_alive_interval(&self) -> Result<Duration, ErrorCode>;
                    fn set_keep_alive_interval(&self, value: Duration) -> Result<(), ErrorCode>;
                    /// The maximum amount of keepalive packets TCP should send before aborting the connection.
                    ///
                    /// If the provided value is 0, an `invalid-argument` error is returned.
                    /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
                    /// I.e. after setting a value, reading the same setting back may return a different value.
                    ///
                    /// Equivalent to the TCP_KEEPCNT socket option.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:     (set) The provided value was 0.
                    fn keep_alive_count(&self) -> Result<u32, ErrorCode>;
                    fn set_keep_alive_count(&self, value: u32) -> Result<(), ErrorCode>;
                    /// Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.
                    ///
                    /// If the provided value is 0, an `invalid-argument` error is returned.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:     (set) The TTL value must be 1 or higher.
                    fn hop_limit(&self) -> Result<u8, ErrorCode>;
                    fn set_hop_limit(&self, value: u8) -> Result<(), ErrorCode>;
                    /// The kernel buffer space reserved for sends/receives on this socket.
                    ///
                    /// If the provided value is 0, an `invalid-argument` error is returned.
                    /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
                    /// I.e. after setting a value, reading the same setting back may return a different value.
                    ///
                    /// Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`:     (set) The provided value was 0.
                    fn receive_buffer_size(&self) -> Result<u64, ErrorCode>;
                    fn set_receive_buffer_size(&self, value: u64) -> Result<(), ErrorCode>;
                    fn send_buffer_size(&self) -> Result<u64, ErrorCode>;
                    fn set_send_buffer_size(&self, value: u64) -> Result<(), ErrorCode>;
                    /// Create a `pollable` which can be used to poll for, or block on,
                    /// completion of any of the asynchronous operations of this socket.
                    ///
                    /// When `finish-bind`, `finish-listen`, `finish-connect` or `accept`
                    /// return `error(would-block)`, this pollable can be used to wait for
                    /// their success or failure, after which the method can be retried.
                    ///
                    /// The pollable is not limited to the async operation that happens to be
                    /// in progress at the time of calling `subscribe` (if any). Theoretically,
                    /// `subscribe` only has to be called once per socket and can then be
                    /// (re)used for the remainder of the socket's lifetime.
                    ///
                    /// See <https://github.com/WebAssembly/wasi-sockets/TcpSocketOperationalSemantics.md#Pollable-readiness>
                    /// for a more information.
                    ///
                    /// Note: this function is here for WASI Preview2 only.
                    /// It's planned to be removed when `future` is natively supported in Preview3.
                    fn subscribe(&self) -> Pollable;
                    /// Initiate a graceful shutdown.
                    ///
                    /// - `receive`: The socket is not expecting to receive any data from
                    /// the peer. The `input-stream` associated with this socket will be
                    /// closed. Any data still in the receive queue at time of calling
                    /// this method will be discarded.
                    /// - `send`: The socket has no more data to send to the peer. The `output-stream`
                    /// associated with this socket will be closed and a FIN packet will be sent.
                    /// - `both`: Same effect as `receive` & `send` combined.
                    ///
                    /// This function is idempotent. Shutting a down a direction more than once
                    /// has no effect and returns `ok`.
                    ///
                    /// The shutdown function does not close (drop) the socket.
                    ///
                    /// # Typical errors
                    /// - `invalid-state`: The socket is not in the `connected` state. (ENOTCONN)
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/shutdown.html>
                    /// - <https://man7.org/linux/man-pages/man2/shutdown.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-shutdown>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=shutdown&sektion=2>
                    fn shutdown(&self, shutdown_type: ShutdownType) -> Result<(), ErrorCode>;
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_sockets_tcp_0_2_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.start-bind"]
    unsafe extern "C" fn export_method_tcp_socket_start_bind(arg0: *mut u8,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,arg9: i32,arg10: i32,arg11: i32,arg12: i32,arg13: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_start_bind_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.finish-bind"]
    unsafe extern "C" fn export_method_tcp_socket_finish_bind(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_finish_bind_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.start-connect"]
    unsafe extern "C" fn export_method_tcp_socket_start_connect(arg0: *mut u8,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,arg9: i32,arg10: i32,arg11: i32,arg12: i32,arg13: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_start_connect_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.finish-connect"]
    unsafe extern "C" fn export_method_tcp_socket_finish_connect(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_finish_connect_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.start-listen"]
    unsafe extern "C" fn export_method_tcp_socket_start_listen(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_start_listen_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.finish-listen"]
    unsafe extern "C" fn export_method_tcp_socket_finish_listen(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_finish_listen_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.accept"]
    unsafe extern "C" fn export_method_tcp_socket_accept(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_accept_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.local-address"]
    unsafe extern "C" fn export_method_tcp_socket_local_address(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_local_address_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.remote-address"]
    unsafe extern "C" fn export_method_tcp_socket_remote_address(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_remote_address_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.is-listening"]
    unsafe extern "C" fn export_method_tcp_socket_is_listening(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_tcp_socket_is_listening_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.address-family"]
    unsafe extern "C" fn export_method_tcp_socket_address_family(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_tcp_socket_address_family_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.set-listen-backlog-size"]
    unsafe extern "C" fn export_method_tcp_socket_set_listen_backlog_size(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_set_listen_backlog_size_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.keep-alive-enabled"]
    unsafe extern "C" fn export_method_tcp_socket_keep_alive_enabled(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_keep_alive_enabled_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.set-keep-alive-enabled"]
    unsafe extern "C" fn export_method_tcp_socket_set_keep_alive_enabled(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_set_keep_alive_enabled_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.keep-alive-idle-time"]
    unsafe extern "C" fn export_method_tcp_socket_keep_alive_idle_time(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_keep_alive_idle_time_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.set-keep-alive-idle-time"]
    unsafe extern "C" fn export_method_tcp_socket_set_keep_alive_idle_time(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_set_keep_alive_idle_time_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.keep-alive-interval"]
    unsafe extern "C" fn export_method_tcp_socket_keep_alive_interval(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_keep_alive_interval_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.set-keep-alive-interval"]
    unsafe extern "C" fn export_method_tcp_socket_set_keep_alive_interval(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_set_keep_alive_interval_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.keep-alive-count"]
    unsafe extern "C" fn export_method_tcp_socket_keep_alive_count(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_keep_alive_count_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.set-keep-alive-count"]
    unsafe extern "C" fn export_method_tcp_socket_set_keep_alive_count(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_set_keep_alive_count_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.hop-limit"]
    unsafe extern "C" fn export_method_tcp_socket_hop_limit(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_hop_limit_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.set-hop-limit"]
    unsafe extern "C" fn export_method_tcp_socket_set_hop_limit(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_set_hop_limit_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.receive-buffer-size"]
    unsafe extern "C" fn export_method_tcp_socket_receive_buffer_size(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_receive_buffer_size_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.set-receive-buffer-size"]
    unsafe extern "C" fn export_method_tcp_socket_set_receive_buffer_size(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_set_receive_buffer_size_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.send-buffer-size"]
    unsafe extern "C" fn export_method_tcp_socket_send_buffer_size(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_send_buffer_size_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.set-send-buffer-size"]
    unsafe extern "C" fn export_method_tcp_socket_set_send_buffer_size(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_set_send_buffer_size_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.subscribe"]
    unsafe extern "C" fn export_method_tcp_socket_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_tcp_socket_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0)
    }
    #[export_name = "wasi:sockets/tcp@0.2.0#[method]tcp-socket.shutdown"]
    unsafe extern "C" fn export_method_tcp_socket_shutdown(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_tcp_socket_shutdown_cabi::<<$ty as $($path_to_types)*::Guest>::TcpSocket>(arg0, arg1)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "wasi:sockets/tcp@0.2.0#[dtor]tcp-socket"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::TcpSocket::dtor::<
        <$ty as $($path_to_types)*::Guest>::TcpSocket
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_wasi_sockets_tcp_0_2_0_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 36]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 36]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod tcp_create_socket {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type NetworkBorrow<'a> =
                    super::super::super::super::exports::wasi::sockets::network::NetworkBorrow<'a>;
                pub type ErrorCode =
                    super::super::super::super::exports::wasi::sockets::network::ErrorCode;
                pub type IpAddressFamily =
                    super::super::super::super::exports::wasi::sockets::network::IpAddressFamily;
                pub type TcpSocket =
                    super::super::super::super::exports::wasi::sockets::tcp::TcpSocket;
                pub type TcpSocketBorrow<'a> =
                    super::super::super::super::exports::wasi::sockets::tcp::TcpSocketBorrow<'a>;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_create_tcp_socket_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::create_tcp_socket(super::super::super::super::exports::wasi::sockets::network::IpAddressFamily::_lift(arg0 as u8));
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                pub trait Guest {
                    /// Create a new TCP socket.
                    ///
                    /// Similar to `socket(AF_INET or AF_INET6, SOCK_STREAM, IPPROTO_TCP)` in POSIX.
                    /// On IPv6 sockets, IPV6_V6ONLY is enabled by default and can't be configured otherwise.
                    ///
                    /// This function does not require a network capability handle. This is considered to be safe because
                    /// at time of creation, the socket is not bound to any `network` yet. Up to the moment `bind`/`connect`
                    /// is called, the socket is effectively an in-memory configuration object, unable to communicate with the outside world.
                    ///
                    /// All sockets are non-blocking. Use the wasi-poll interface to block on asynchronous operations.
                    ///
                    /// # Typical errors
                    /// - `not-supported`:     The specified `address-family` is not supported. (EAFNOSUPPORT)
                    /// - `new-socket-limit`:  The new socket resource could not be created because of a system limit. (EMFILE, ENFILE)
                    ///
                    /// # References
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html>
                    /// - <https://man7.org/linux/man-pages/man2/socket.2.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasocketw>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=socket&sektion=2>
                    fn create_tcp_socket(
                        address_family: IpAddressFamily,
                    ) -> Result<TcpSocket, ErrorCode>;
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_sockets_tcp_create_socket_0_2_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "wasi:sockets/tcp-create-socket@0.2.0#create-tcp-socket"]
    unsafe extern "C" fn export_create_tcp_socket(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_create_tcp_socket_cabi::<$ty>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_wasi_sockets_tcp_create_socket_0_2_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod ip_name_lookup {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Pollable = super::super::super::super::wasi::io::poll::Pollable;
                pub type Network =
                    super::super::super::super::exports::wasi::sockets::network::Network;
                pub type NetworkBorrow<'a> =
                    super::super::super::super::exports::wasi::sockets::network::NetworkBorrow<'a>;
                pub type ErrorCode =
                    super::super::super::super::exports::wasi::sockets::network::ErrorCode;
                pub type IpAddress =
                    super::super::super::super::exports::wasi::sockets::network::IpAddress;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ResolveAddressStream {
                    handle: _rt::Resource<ResolveAddressStream>,
                }

                type _ResolveAddressStreamRep<T> = Option<T>;

                impl ResolveAddressStream {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `ResolveAddressStream`.
                    pub fn new<T: GuestResolveAddressStream>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ResolveAddressStreamRep<T> = Some(val);
                        let ptr: *mut _ResolveAddressStreamRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestResolveAddressStream>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestResolveAddressStream>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestResolveAddressStream>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestResolveAddressStream` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ResolveAddressStreamRep<T>);
                    }

                    fn as_ptr<T: GuestResolveAddressStream>(
                        &self,
                    ) -> *mut _ResolveAddressStreamRep<T> {
                        ResolveAddressStream::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`ResolveAddressStream`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ResolveAddressStreamBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a ResolveAddressStream>,
                }

                impl<'a> ResolveAddressStreamBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestResolveAddressStream>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ResolveAddressStreamRep<T> {
                        ResolveAddressStream::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for ResolveAddressStream {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasi:sockets/ip-name-lookup@0.2.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]resolve-address-stream"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_resolve_addresses_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::resolve_addresses(
                        NetworkBorrow::lift(arg0 as u32 as usize),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_resolve_address_stream_resolve_next_address_cabi<
                    T: GuestResolveAddressStream,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::resolve_next_address(
                        ResolveAddressStreamBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr1.add(2).cast::<u8>() = (1i32) as u8;
                                    use super::super::super::super::exports::wasi::sockets::network::IpAddress as V4;
                                    match e {
                                        V4::Ipv4(e) => {
                                            *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                            let (t2_0, t2_1, t2_2, t2_3) = e;
                                            *ptr1.add(6).cast::<u8>() = (_rt::as_i32(t2_0)) as u8;
                                            *ptr1.add(7).cast::<u8>() = (_rt::as_i32(t2_1)) as u8;
                                            *ptr1.add(8).cast::<u8>() = (_rt::as_i32(t2_2)) as u8;
                                            *ptr1.add(9).cast::<u8>() = (_rt::as_i32(t2_3)) as u8;
                                        }
                                        V4::Ipv6(e) => {
                                            *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                            let (t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7) =
                                                e;
                                            *ptr1.add(6).cast::<u16>() = (_rt::as_i32(t3_0)) as u16;
                                            *ptr1.add(8).cast::<u16>() = (_rt::as_i32(t3_1)) as u16;
                                            *ptr1.add(10).cast::<u16>() =
                                                (_rt::as_i32(t3_2)) as u16;
                                            *ptr1.add(12).cast::<u16>() =
                                                (_rt::as_i32(t3_3)) as u16;
                                            *ptr1.add(14).cast::<u16>() =
                                                (_rt::as_i32(t3_4)) as u16;
                                            *ptr1.add(16).cast::<u16>() =
                                                (_rt::as_i32(t3_5)) as u16;
                                            *ptr1.add(18).cast::<u16>() =
                                                (_rt::as_i32(t3_6)) as u16;
                                            *ptr1.add(20).cast::<u16>() =
                                                (_rt::as_i32(t3_7)) as u16;
                                        }
                                    }
                                }
                                None => {
                                    *ptr1.add(2).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(2).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_resolve_address_stream_subscribe_cabi<
                    T: GuestResolveAddressStream,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::subscribe(ResolveAddressStreamBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                pub trait Guest {
                    type ResolveAddressStream: GuestResolveAddressStream;
                    /// Resolve an internet host name to a list of IP addresses.
                    ///
                    /// Unicode domain names are automatically converted to ASCII using IDNA encoding.
                    /// If the input is an IP address string, the address is parsed and returned
                    /// as-is without making any external requests.
                    ///
                    /// See the wasi-socket proposal README.md for a comparison with getaddrinfo.
                    ///
                    /// This function never blocks. It either immediately fails or immediately
                    /// returns successfully with a `resolve-address-stream` that can be used
                    /// to (asynchronously) fetch the results.
                    ///
                    /// # Typical errors
                    /// - `invalid-argument`: `name` is a syntactically invalid domain name or IP address.
                    ///
                    /// # References:
                    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html>
                    /// - <https://man7.org/linux/man-pages/man3/getaddrinfo.3.html>
                    /// - <https://learn.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo>
                    /// - <https://man.freebsd.org/cgi/man.cgi?query=getaddrinfo&sektion=3>
                    fn resolve_addresses(
                        network: NetworkBorrow<'_>,
                        name: _rt::String,
                    ) -> Result<ResolveAddressStream, ErrorCode>;
                }
                pub trait GuestResolveAddressStream: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasi:sockets/ip-name-lookup@0.2.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]resolve-address-stream"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasi:sockets/ip-name-lookup@0.2.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]resolve-address-stream"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    /// Returns the next address from the resolver.
                    ///
                    /// This function should be called multiple times. On each call, it will
                    /// return the next address in connection order preference. If all
                    /// addresses have been exhausted, this function returns `none`.
                    ///
                    /// This function never returns IPv4-mapped IPv6 addresses.
                    ///
                    /// # Typical errors
                    /// - `name-unresolvable`:          Name does not exist or has no suitable associated IP addresses. (EAI_NONAME, EAI_NODATA, EAI_ADDRFAMILY)
                    /// - `temporary-resolver-failure`: A temporary failure in name resolution occurred. (EAI_AGAIN)
                    /// - `permanent-resolver-failure`: A permanent failure in name resolution occurred. (EAI_FAIL)
                    /// - `would-block`:                A result is not available yet. (EWOULDBLOCK, EAGAIN)
                    fn resolve_next_address(&self) -> Result<Option<IpAddress>, ErrorCode>;
                    /// Create a `pollable` which will resolve once the stream is ready for I/O.
                    ///
                    /// Note: this function is here for WASI Preview2 only.
                    /// It's planned to be removed when `future` is natively supported in Preview3.
                    fn subscribe(&self) -> Pollable;
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_sockets_ip_name_lookup_0_2_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "wasi:sockets/ip-name-lookup@0.2.0#resolve-addresses"]
    unsafe extern "C" fn export_resolve_addresses(arg0: i32,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_resolve_addresses_cabi::<$ty>(arg0, arg1, arg2)
    }
    #[export_name = "wasi:sockets/ip-name-lookup@0.2.0#[method]resolve-address-stream.resolve-next-address"]
    unsafe extern "C" fn export_method_resolve_address_stream_resolve_next_address(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_resolve_address_stream_resolve_next_address_cabi::<<$ty as $($path_to_types)*::Guest>::ResolveAddressStream>(arg0)
    }
    #[export_name = "wasi:sockets/ip-name-lookup@0.2.0#[method]resolve-address-stream.subscribe"]
    unsafe extern "C" fn export_method_resolve_address_stream_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_resolve_address_stream_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::ResolveAddressStream>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "wasi:sockets/ip-name-lookup@0.2.0#[dtor]resolve-address-stream"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::ResolveAddressStream::dtor::<
        <$ty as $($path_to_types)*::Guest>::ResolveAddressStream
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_wasi_sockets_ip_name_lookup_0_2_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 22]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 22]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::vec::Vec;

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_virt_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wasi::filesystem::types::__export_wasi_filesystem_types_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::filesystem::types);
  $($path_to_types_root)*::exports::wasi::filesystem::preopens::__export_wasi_filesystem_preopens_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::filesystem::preopens);
  $($path_to_types_root)*::exports::wasi::cli::environment::__export_wasi_cli_environment_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::cli::environment);
  $($path_to_types_root)*::exports::wasi::cli::exit::__export_wasi_cli_exit_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::cli::exit);
  $($path_to_types_root)*::exports::wasi::sockets::network::__export_wasi_sockets_network_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::sockets::network);
  $($path_to_types_root)*::exports::wasi::sockets::instance_network::__export_wasi_sockets_instance_network_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::sockets::instance_network);
  $($path_to_types_root)*::exports::wasi::sockets::udp::__export_wasi_sockets_udp_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::sockets::udp);
  $($path_to_types_root)*::exports::wasi::sockets::udp_create_socket::__export_wasi_sockets_udp_create_socket_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::sockets::udp_create_socket);
  $($path_to_types_root)*::exports::wasi::sockets::tcp::__export_wasi_sockets_tcp_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::sockets::tcp);
  $($path_to_types_root)*::exports::wasi::sockets::tcp_create_socket::__export_wasi_sockets_tcp_create_socket_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::sockets::tcp_create_socket);
  $($path_to_types_root)*::exports::wasi::sockets::ip_name_lookup::__export_wasi_sockets_ip_name_lookup_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::sockets::ip_name_lookup);
  )
}
#[doc(inline)]
pub(crate) use __export_virt_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:virt:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 10585] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xdeQ\x01A\x02\x01AC\x01\
B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[meth\
od]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollable.b\
lock\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\x01\
\x12wasi:io/poll@0.2.0\x05\0\x02\x03\0\0\x08pollable\x01B\x0f\x02\x03\x02\x01\x01\
\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07instant\x03\0\x02\x01w\x04\0\x08duratio\
n\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\x01@\0\0\x05\x04\0\x0aresolution\x01\
\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\0\x11subscribe-instant\x01\x09\x01@\
\x01\x04when\x05\0\x08\x04\0\x12subscribe-duration\x01\x0a\x03\x01!wasi:clocks/m\
onotonic-clock@0.2.0\x05\x02\x01B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\
\x08datetime\x03\0\0\x01@\0\0\x01\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\
\x03\x01\x1cwasi:clocks/wall-clock@0.2.0\x05\x03\x01B\x04\x04\0\x05error\x03\x01\
\x01h\0\x01@\x01\x04self\x01\0s\x04\0\x1d[method]error.to-debug-string\x01\x02\x03\
\x01\x13wasi:io/error@0.2.0\x05\x04\x02\x03\0\x03\x05error\x01B(\x02\x03\x02\x01\
\x05\x04\0\x05error\x03\0\0\x02\x03\x02\x01\x01\x04\0\x08pollable\x03\0\x02\x01i\
\x01\x01q\x02\x15last-operation-failed\x01\x04\0\x06closed\0\0\x04\0\x0cstream-e\
rror\x03\0\x05\x04\0\x0cinput-stream\x03\x01\x04\0\x0doutput-stream\x03\x01\x01h\
\x07\x01p}\x01j\x01\x0a\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0b\x04\0\x19[met\
hod]input-stream.read\x01\x0c\x04\0\"[method]input-stream.blocking-read\x01\x0c\x01\
j\x01w\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0d\x04\0\x19[method]input-stream.\
skip\x01\x0e\x04\0\"[method]input-stream.blocking-skip\x01\x0e\x01i\x03\x01@\x01\
\x04self\x09\0\x0f\x04\0\x1e[method]input-stream.subscribe\x01\x10\x01h\x08\x01@\
\x01\x04self\x11\0\x0d\x04\0![method]output-stream.check-write\x01\x12\x01j\0\x01\
\x06\x01@\x02\x04self\x11\x08contents\x0a\0\x13\x04\0\x1b[method]output-stream.w\
rite\x01\x14\x04\0.[method]output-stream.blocking-write-and-flush\x01\x14\x01@\x01\
\x04self\x11\0\x13\x04\0\x1b[method]output-stream.flush\x01\x15\x04\0$[method]ou\
tput-stream.blocking-flush\x01\x15\x01@\x01\x04self\x11\0\x0f\x04\0\x1f[method]o\
utput-stream.subscribe\x01\x16\x01@\x02\x04self\x11\x03lenw\0\x13\x04\0\"[method\
]output-stream.write-zeroes\x01\x17\x04\05[method]output-stream.blocking-write-z\
eroes-and-flush\x01\x17\x01@\x03\x04self\x11\x03src\x09\x03lenw\0\x0d\x04\0\x1c[\
method]output-stream.splice\x01\x18\x04\0%[method]output-stream.blocking-splice\x01\
\x18\x03\x01\x15wasi:io/streams@0.2.0\x05\x06\x02\x03\0\x04\x0doutput-stream\x01\
B\x05\x02\x03\x02\x01\x07\x04\0\x0doutput-stream\x03\0\0\x01i\x01\x01@\0\0\x02\x04\
\0\x0aget-stdout\x01\x03\x03\x01\x15wasi:cli/stdout@0.2.0\x05\x08\x01B\x01\x04\0\
\x0eterminal-input\x03\x01\x03\x01\x1dwasi:cli/terminal-input@0.2.0\x05\x09\x01B\
\x01\x04\0\x0fterminal-output\x03\x01\x03\x01\x1ewasi:cli/terminal-output@0.2.0\x05\
\x0a\x02\x03\0\x06\x0eterminal-input\x01B\x06\x02\x03\x02\x01\x0b\x04\0\x0etermi\
nal-input\x03\0\0\x01i\x01\x01k\x02\x01@\0\0\x03\x04\0\x12get-terminal-stdin\x01\
\x04\x03\x01\x1dwasi:cli/terminal-stdin@0.2.0\x05\x0c\x02\x03\0\x07\x0fterminal-\
output\x01B\x06\x02\x03\x02\x01\x0d\x04\0\x0fterminal-output\x03\0\0\x01i\x01\x01\
k\x02\x01@\0\0\x03\x04\0\x13get-terminal-stdout\x01\x04\x03\x01\x1ewasi:cli/term\
inal-stdout@0.2.0\x05\x0e\x01B\x06\x02\x03\x02\x01\x0d\x04\0\x0fterminal-output\x03\
\0\0\x01i\x01\x01k\x02\x01@\0\0\x03\x04\0\x13get-terminal-stderr\x01\x04\x03\x01\
\x1ewasi:cli/terminal-stderr@0.2.0\x05\x0f\x01B\x05\x01p}\x01@\x01\x03lenw\0\0\x04\
\0\x10get-random-bytes\x01\x01\x01@\0\0w\x04\0\x0eget-random-u64\x01\x02\x03\x01\
\x18wasi:random/random@0.2.0\x05\x10\x01B\x05\x01p}\x01@\x01\x03lenw\0\0\x04\0\x19\
get-insecure-random-bytes\x01\x01\x01@\0\0w\x04\0\x17get-insecure-random-u64\x01\
\x02\x03\x01\x1awasi:random/insecure@0.2.0\x05\x11\x01B\x03\x01o\x02ww\x01@\0\0\0\
\x04\0\x0dinsecure-seed\x01\x01\x03\x01\x1fwasi:random/insecure-seed@0.2.0\x05\x12\
\x02\x03\0\x04\x0cinput-stream\x02\x03\0\x04\x05error\x02\x03\0\x02\x08datetime\x01\
Br\x02\x03\x02\x01\x13\x04\0\x0cinput-stream\x03\0\0\x02\x03\x02\x01\x07\x04\0\x0d\
output-stream\x03\0\x02\x02\x03\x02\x01\x14\x04\0\x05error\x03\0\x04\x02\x03\x02\
\x01\x15\x04\0\x08datetime\x03\0\x06\x01w\x04\0\x08filesize\x03\0\x08\x01m\x08\x07\
unknown\x0cblock-device\x10character-device\x09directory\x04fifo\x0dsymbolic-lin\
k\x0cregular-file\x06socket\x04\0\x0fdescriptor-type\x03\0\x0a\x01n\x06\x04read\x05\
write\x13file-integrity-sync\x13data-integrity-sync\x14requested-write-sync\x10m\
utate-directory\x04\0\x10descriptor-flags\x03\0\x0c\x01n\x01\x0esymlink-follow\x04\
\0\x0apath-flags\x03\0\x0e\x01n\x04\x06create\x09directory\x09exclusive\x08trunc\
ate\x04\0\x0aopen-flags\x03\0\x10\x01w\x04\0\x0alink-count\x03\0\x12\x01k\x07\x01\
r\x06\x04type\x0b\x0alink-count\x13\x04size\x09\x15data-access-timestamp\x14\x1b\
data-modification-timestamp\x14\x17status-change-timestamp\x14\x04\0\x0fdescript\
or-stat\x03\0\x15\x01q\x03\x09no-change\0\0\x03now\0\0\x09timestamp\x01\x07\0\x04\
\0\x0dnew-timestamp\x03\0\x17\x01r\x02\x04type\x0b\x04names\x04\0\x0fdirectory-e\
ntry\x03\0\x19\x01m%\x06access\x0bwould-block\x07already\x0ebad-descriptor\x04bu\
sy\x08deadlock\x05quota\x05exist\x0efile-too-large\x15illegal-byte-sequence\x0bi\
n-progress\x0binterrupted\x07invalid\x02io\x0cis-directory\x04loop\x0etoo-many-l\
inks\x0cmessage-size\x0dname-too-long\x09no-device\x08no-entry\x07no-lock\x13ins\
ufficient-memory\x12insufficient-space\x0dnot-directory\x09not-empty\x0fnot-reco\
verable\x0bunsupported\x06no-tty\x0eno-such-device\x08overflow\x0dnot-permitted\x04\
pipe\x09read-only\x0cinvalid-seek\x0etext-file-busy\x0ccross-device\x04\0\x0aerr\
or-code\x03\0\x1b\x01m\x06\x06normal\x0asequential\x06random\x09will-need\x09don\
t-need\x08no-reuse\x04\0\x06advice\x03\0\x1d\x01r\x02\x05lowerw\x05upperw\x04\0\x13\
metadata-hash-value\x03\0\x1f\x04\0\x0adescriptor\x03\x01\x04\0\x16directory-ent\
ry-stream\x03\x01\x01h!\x01i\x01\x01j\x01$\x01\x1c\x01@\x02\x04self#\x06offset\x09\
\0%\x04\0\"[method]descriptor.read-via-stream\x01&\x01i\x03\x01j\x01'\x01\x1c\x01\
@\x02\x04self#\x06offset\x09\0(\x04\0#[method]descriptor.write-via-stream\x01)\x01\
@\x01\x04self#\0(\x04\0$[method]descriptor.append-via-stream\x01*\x01j\0\x01\x1c\
\x01@\x04\x04self#\x06offset\x09\x06length\x09\x06advice\x1e\0+\x04\0\x19[method\
]descriptor.advise\x01,\x01@\x01\x04self#\0+\x04\0\x1c[method]descriptor.sync-da\
ta\x01-\x01j\x01\x0d\x01\x1c\x01@\x01\x04self#\0.\x04\0\x1c[method]descriptor.ge\
t-flags\x01/\x01j\x01\x0b\x01\x1c\x01@\x01\x04self#\00\x04\0\x1b[method]descript\
or.get-type\x011\x01@\x02\x04self#\x04size\x09\0+\x04\0\x1b[method]descriptor.se\
t-size\x012\x01@\x03\x04self#\x15data-access-timestamp\x18\x1bdata-modification-\
timestamp\x18\0+\x04\0\x1c[method]descriptor.set-times\x013\x01p}\x01o\x024\x7f\x01\
j\x015\x01\x1c\x01@\x03\x04self#\x06length\x09\x06offset\x09\06\x04\0\x17[method\
]descriptor.read\x017\x01j\x01\x09\x01\x1c\x01@\x03\x04self#\x06buffer4\x06offse\
t\x09\08\x04\0\x18[method]descriptor.write\x019\x01i\"\x01j\x01:\x01\x1c\x01@\x01\
\x04self#\0;\x04\0![method]descriptor.read-directory\x01<\x04\0\x17[method]descr\
iptor.sync\x01-\x01@\x02\x04self#\x04paths\0+\x04\0&[method]descriptor.create-di\
rectory-at\x01=\x01j\x01\x16\x01\x1c\x01@\x01\x04self#\0>\x04\0\x17[method]descr\
iptor.stat\x01?\x01@\x03\x04self#\x0apath-flags\x0f\x04paths\0>\x04\0\x1a[method\
]descriptor.stat-at\x01@\x01@\x05\x04self#\x0apath-flags\x0f\x04paths\x15data-ac\
cess-timestamp\x18\x1bdata-modification-timestamp\x18\0+\x04\0\x1f[method]descri\
ptor.set-times-at\x01A\x01@\x05\x04self#\x0eold-path-flags\x0f\x08old-paths\x0en\
ew-descriptor#\x08new-paths\0+\x04\0\x1a[method]descriptor.link-at\x01B\x01i!\x01\
j\x01\xc3\0\x01\x1c\x01@\x05\x04self#\x0apath-flags\x0f\x04paths\x0aopen-flags\x11\
\x05flags\x0d\0\xc4\0\x04\0\x1a[method]descriptor.open-at\x01E\x01j\x01s\x01\x1c\
\x01@\x02\x04self#\x04paths\0\xc6\0\x04\0\x1e[method]descriptor.readlink-at\x01G\
\x04\0&[method]descriptor.remove-directory-at\x01=\x01@\x04\x04self#\x08old-path\
s\x0enew-descriptor#\x08new-paths\0+\x04\0\x1c[method]descriptor.rename-at\x01H\x01\
@\x03\x04self#\x08old-paths\x08new-paths\0+\x04\0\x1d[method]descriptor.symlink-\
at\x01I\x04\0![method]descriptor.unlink-file-at\x01=\x01@\x02\x04self#\x05other#\
\0\x7f\x04\0![method]descriptor.is-same-object\x01J\x01j\x01\x20\x01\x1c\x01@\x01\
\x04self#\0\xcb\0\x04\0\x20[method]descriptor.metadata-hash\x01L\x01@\x03\x04sel\
f#\x0apath-flags\x0f\x04paths\0\xcb\0\x04\0#[method]descriptor.metadata-hash-at\x01\
M\x01h\"\x01k\x1a\x01j\x01\xcf\0\x01\x1c\x01@\x01\x04self\xce\0\0\xd0\0\x04\03[m\
ethod]directory-entry-stream.read-directory-entry\x01Q\x01h\x05\x01k\x1c\x01@\x01\
\x03err\xd2\0\0\xd3\0\x04\0\x15filesystem-error-code\x01T\x04\x01\x1bwasi:filesy\
stem/types@0.2.0\x05\x16\x02\x03\0\x0e\x0adescriptor\x01B\x07\x02\x03\x02\x01\x17\
\x04\0\x0adescriptor\x03\0\0\x01i\x01\x01o\x02\x02s\x01p\x03\x01@\0\0\x04\x04\0\x0f\
get-directories\x01\x05\x04\x01\x1ewasi:filesystem/preopens@0.2.0\x05\x18\x01B\x0a\
\x01o\x02ss\x01p\0\x01@\0\0\x01\x04\0\x0fget-environment\x01\x02\x01ps\x01@\0\0\x03\
\x04\0\x0dget-arguments\x01\x04\x01ks\x01@\0\0\x05\x04\0\x0binitial-cwd\x01\x06\x04\
\x01\x1awasi:cli/environment@0.2.0\x05\x19\x01B\x03\x01j\0\0\x01@\x01\x06status\0\
\x01\0\x04\0\x04exit\x01\x01\x04\x01\x13wasi:cli/exit@0.2.0\x05\x1a\x01B\x11\x04\
\0\x07network\x03\x01\x01m\x15\x07unknown\x0daccess-denied\x0dnot-supported\x10i\
nvalid-argument\x0dout-of-memory\x07timeout\x14concurrency-conflict\x0fnot-in-pr\
ogress\x0bwould-block\x0dinvalid-state\x10new-socket-limit\x14address-not-bindab\
le\x0eaddress-in-use\x12remote-unreachable\x12connection-refused\x10connection-r\
eset\x12connection-aborted\x12datagram-too-large\x11name-unresolvable\x1atempora\
ry-resolver-failure\x1apermanent-resolver-failure\x04\0\x0aerror-code\x03\0\x01\x01\
m\x02\x04ipv4\x04ipv6\x04\0\x11ip-address-family\x03\0\x03\x01o\x04}}}}\x04\0\x0c\
ipv4-address\x03\0\x05\x01o\x08{{{{{{{{\x04\0\x0cipv6-address\x03\0\x07\x01q\x02\
\x04ipv4\x01\x06\0\x04ipv6\x01\x08\0\x04\0\x0aip-address\x03\0\x09\x01r\x02\x04p\
ort{\x07address\x06\x04\0\x13ipv4-socket-address\x03\0\x0b\x01r\x04\x04port{\x09\
flow-infoy\x07address\x08\x08scope-idy\x04\0\x13ipv6-socket-address\x03\0\x0d\x01\
q\x02\x04ipv4\x01\x0c\0\x04ipv6\x01\x0e\0\x04\0\x11ip-socket-address\x03\0\x0f\x04\
\x01\x1awasi:sockets/network@0.2.0\x05\x1b\x02\x03\0\x12\x07network\x01B\x05\x02\
\x03\x02\x01\x1c\x04\0\x07network\x03\0\0\x01i\x01\x01@\0\0\x02\x04\0\x10instanc\
e-network\x01\x03\x04\x01#wasi:sockets/instance-network@0.2.0\x05\x1d\x02\x03\0\x12\
\x0aerror-code\x02\x03\0\x12\x11ip-socket-address\x02\x03\0\x12\x11ip-address-fa\
mily\x01BD\x02\x03\x02\x01\x01\x04\0\x08pollable\x03\0\0\x02\x03\x02\x01\x1c\x04\
\0\x07network\x03\0\x02\x02\x03\x02\x01\x1e\x04\0\x0aerror-code\x03\0\x04\x02\x03\
\x02\x01\x1f\x04\0\x11ip-socket-address\x03\0\x06\x02\x03\x02\x01\x20\x04\0\x11i\
p-address-family\x03\0\x08\x01p}\x01r\x02\x04data\x0a\x0eremote-address\x07\x04\0\
\x11incoming-datagram\x03\0\x0b\x01k\x07\x01r\x02\x04data\x0a\x0eremote-address\x0d\
\x04\0\x11outgoing-datagram\x03\0\x0e\x04\0\x0audp-socket\x03\x01\x04\0\x18incom\
ing-datagram-stream\x03\x01\x04\0\x18outgoing-datagram-stream\x03\x01\x01h\x10\x01\
h\x03\x01j\0\x01\x05\x01@\x03\x04self\x13\x07network\x14\x0dlocal-address\x07\0\x15\
\x04\0\x1d[method]udp-socket.start-bind\x01\x16\x01@\x01\x04self\x13\0\x15\x04\0\
\x1e[method]udp-socket.finish-bind\x01\x17\x01i\x11\x01i\x12\x01o\x02\x18\x19\x01\
j\x01\x1a\x01\x05\x01@\x02\x04self\x13\x0eremote-address\x0d\0\x1b\x04\0\x19[met\
hod]udp-socket.stream\x01\x1c\x01j\x01\x07\x01\x05\x01@\x01\x04self\x13\0\x1d\x04\
\0\x20[method]udp-socket.local-address\x01\x1e\x04\0![method]udp-socket.remote-a\
ddress\x01\x1e\x01@\x01\x04self\x13\0\x09\x04\0![method]udp-socket.address-famil\
y\x01\x1f\x01j\x01}\x01\x05\x01@\x01\x04self\x13\0\x20\x04\0$[method]udp-socket.\
unicast-hop-limit\x01!\x01@\x02\x04self\x13\x05value}\0\x15\x04\0([method]udp-so\
cket.set-unicast-hop-limit\x01\"\x01j\x01w\x01\x05\x01@\x01\x04self\x13\0#\x04\0\
&[method]udp-socket.receive-buffer-size\x01$\x01@\x02\x04self\x13\x05valuew\0\x15\
\x04\0*[method]udp-socket.set-receive-buffer-size\x01%\x04\0#[method]udp-socket.\
send-buffer-size\x01$\x04\0'[method]udp-socket.set-send-buffer-size\x01%\x01i\x01\
\x01@\x01\x04self\x13\0&\x04\0\x1c[method]udp-socket.subscribe\x01'\x01h\x11\x01\
p\x0c\x01j\x01)\x01\x05\x01@\x02\x04self(\x0bmax-resultsw\0*\x04\0([method]incom\
ing-datagram-stream.receive\x01+\x01@\x01\x04self(\0&\x04\0*[method]incoming-dat\
agram-stream.subscribe\x01,\x01h\x12\x01@\x01\x04self-\0#\x04\0+[method]outgoing\
-datagram-stream.check-send\x01.\x01p\x0f\x01@\x02\x04self-\x09datagrams/\0#\x04\
\0%[method]outgoing-datagram-stream.send\x010\x01@\x01\x04self-\0&\x04\0*[method\
]outgoing-datagram-stream.subscribe\x011\x04\x01\x16wasi:sockets/udp@0.2.0\x05!\x02\
\x03\0\x14\x0audp-socket\x01B\x0c\x02\x03\x02\x01\x1c\x04\0\x07network\x03\0\0\x02\
\x03\x02\x01\x1e\x04\0\x0aerror-code\x03\0\x02\x02\x03\x02\x01\x20\x04\0\x11ip-a\
ddress-family\x03\0\x04\x02\x03\x02\x01\"\x04\0\x0audp-socket\x03\0\x06\x01i\x07\
\x01j\x01\x08\x01\x03\x01@\x01\x0eaddress-family\x05\0\x09\x04\0\x11create-udp-s\
ocket\x01\x0a\x04\x01$wasi:sockets/udp-create-socket@0.2.0\x05#\x02\x03\0\x01\x08\
duration\x01BT\x02\x03\x02\x01\x13\x04\0\x0cinput-stream\x03\0\0\x02\x03\x02\x01\
\x07\x04\0\x0doutput-stream\x03\0\x02\x02\x03\x02\x01\x01\x04\0\x08pollable\x03\0\
\x04\x02\x03\x02\x01$\x04\0\x08duration\x03\0\x06\x02\x03\x02\x01\x1c\x04\0\x07n\
etwork\x03\0\x08\x02\x03\x02\x01\x1e\x04\0\x0aerror-code\x03\0\x0a\x02\x03\x02\x01\
\x1f\x04\0\x11ip-socket-address\x03\0\x0c\x02\x03\x02\x01\x20\x04\0\x11ip-addres\
s-family\x03\0\x0e\x01m\x03\x07receive\x04send\x04both\x04\0\x0dshutdown-type\x03\
\0\x10\x04\0\x0atcp-socket\x03\x01\x01h\x12\x01h\x09\x01j\0\x01\x0b\x01@\x03\x04\
self\x13\x07network\x14\x0dlocal-address\x0d\0\x15\x04\0\x1d[method]tcp-socket.s\
tart-bind\x01\x16\x01@\x01\x04self\x13\0\x15\x04\0\x1e[method]tcp-socket.finish-\
bind\x01\x17\x01@\x03\x04self\x13\x07network\x14\x0eremote-address\x0d\0\x15\x04\
\0\x20[method]tcp-socket.start-connect\x01\x18\x01i\x01\x01i\x03\x01o\x02\x19\x1a\
\x01j\x01\x1b\x01\x0b\x01@\x01\x04self\x13\0\x1c\x04\0![method]tcp-socket.finish\
-connect\x01\x1d\x04\0\x1f[method]tcp-socket.start-listen\x01\x17\x04\0\x20[meth\
od]tcp-socket.finish-listen\x01\x17\x01i\x12\x01o\x03\x1e\x19\x1a\x01j\x01\x1f\x01\
\x0b\x01@\x01\x04self\x13\0\x20\x04\0\x19[method]tcp-socket.accept\x01!\x01j\x01\
\x0d\x01\x0b\x01@\x01\x04self\x13\0\"\x04\0\x20[method]tcp-socket.local-address\x01\
#\x04\0![method]tcp-socket.remote-address\x01#\x01@\x01\x04self\x13\0\x7f\x04\0\x1f\
[method]tcp-socket.is-listening\x01$\x01@\x01\x04self\x13\0\x0f\x04\0![method]tc\
p-socket.address-family\x01%\x01@\x02\x04self\x13\x05valuew\0\x15\x04\0*[method]\
tcp-socket.set-listen-backlog-size\x01&\x01j\x01\x7f\x01\x0b\x01@\x01\x04self\x13\
\0'\x04\0%[method]tcp-socket.keep-alive-enabled\x01(\x01@\x02\x04self\x13\x05val\
ue\x7f\0\x15\x04\0)[method]tcp-socket.set-keep-alive-enabled\x01)\x01j\x01\x07\x01\
\x0b\x01@\x01\x04self\x13\0*\x04\0'[method]tcp-socket.keep-alive-idle-time\x01+\x01\
@\x02\x04self\x13\x05value\x07\0\x15\x04\0+[method]tcp-socket.set-keep-alive-idl\
e-time\x01,\x04\0&[method]tcp-socket.keep-alive-interval\x01+\x04\0*[method]tcp-\
socket.set-keep-alive-interval\x01,\x01j\x01y\x01\x0b\x01@\x01\x04self\x13\0-\x04\
\0#[method]tcp-socket.keep-alive-count\x01.\x01@\x02\x04self\x13\x05valuey\0\x15\
\x04\0'[method]tcp-socket.set-keep-alive-count\x01/\x01j\x01}\x01\x0b\x01@\x01\x04\
self\x13\00\x04\0\x1c[method]tcp-socket.hop-limit\x011\x01@\x02\x04self\x13\x05v\
alue}\0\x15\x04\0\x20[method]tcp-socket.set-hop-limit\x012\x01j\x01w\x01\x0b\x01\
@\x01\x04self\x13\03\x04\0&[method]tcp-socket.receive-buffer-size\x014\x04\0*[me\
thod]tcp-socket.set-receive-buffer-size\x01&\x04\0#[method]tcp-socket.send-buffe\
r-size\x014\x04\0'[method]tcp-socket.set-send-buffer-size\x01&\x01i\x05\x01@\x01\
\x04self\x13\05\x04\0\x1c[method]tcp-socket.subscribe\x016\x01@\x02\x04self\x13\x0d\
shutdown-type\x11\0\x15\x04\0\x1b[method]tcp-socket.shutdown\x017\x04\x01\x16was\
i:sockets/tcp@0.2.0\x05%\x02\x03\0\x16\x0atcp-socket\x01B\x0c\x02\x03\x02\x01\x1c\
\x04\0\x07network\x03\0\0\x02\x03\x02\x01\x1e\x04\0\x0aerror-code\x03\0\x02\x02\x03\
\x02\x01\x20\x04\0\x11ip-address-family\x03\0\x04\x02\x03\x02\x01&\x04\0\x0atcp-\
socket\x03\0\x06\x01i\x07\x01j\x01\x08\x01\x03\x01@\x01\x0eaddress-family\x05\0\x09\
\x04\0\x11create-tcp-socket\x01\x0a\x04\x01$wasi:sockets/tcp-create-socket@0.2.0\
\x05'\x02\x03\0\x12\x0aip-address\x01B\x16\x02\x03\x02\x01\x01\x04\0\x08pollable\
\x03\0\0\x02\x03\x02\x01\x1c\x04\0\x07network\x03\0\x02\x02\x03\x02\x01\x1e\x04\0\
\x0aerror-code\x03\0\x04\x02\x03\x02\x01(\x04\0\x0aip-address\x03\0\x06\x04\0\x16\
resolve-address-stream\x03\x01\x01h\x08\x01k\x07\x01j\x01\x0a\x01\x05\x01@\x01\x04\
self\x09\0\x0b\x04\03[method]resolve-address-stream.resolve-next-address\x01\x0c\
\x01i\x01\x01@\x01\x04self\x09\0\x0d\x04\0([method]resolve-address-stream.subscr\
ibe\x01\x0e\x01h\x03\x01i\x08\x01j\x01\x10\x01\x05\x01@\x02\x07network\x0f\x04na\
mes\0\x11\x04\0\x11resolve-addresses\x01\x12\x04\x01!wasi:sockets/ip-name-lookup\
@0.2.0\x05)\x04\x01\x1dcomponent:spin-wasi-virt/virt\x04\0\x0b\x0a\x01\0\x04virt\
\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.202.0\x10\
wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
