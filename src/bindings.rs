// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod exports {
    pub mod fermyon {
        pub mod spin {
            #[allow(clippy::all)]
            pub mod key_value {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// An open key-value store

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Store {
                    handle: _rt::Resource<Store>,
                }

                type _StoreRep<T> = Option<T>;

                impl Store {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Store`.
                    pub fn new<T: GuestStore>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _StoreRep<T> = Some(val);
                        let ptr: *mut _StoreRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestStore>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestStore>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestStore>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestStore` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    fn as_ptr<T: GuestStore>(&self) -> *mut _StoreRep<T> {
                        Store::type_guard::<T>();
                        unsafe { T::_resource_rep(self.handle()).cast() }
                    }
                }

                /// A borrowed version of [`Store`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct StoreBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Store>,
                }

                impl<'a> StoreBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestStore>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _StoreRep<T> {
                        Store::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Store {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]fermyon:spin/key-value@2.0.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]store"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                /// The set of errors which may be raised by functions in this interface
                #[derive(Clone)]
                pub enum Error {
                    /// Too many stores have been opened simultaneously. Closing one or more
                    /// stores prior to retrying may address this.
                    StoreTableFull,
                    /// The host does not recognize the store label requested.
                    NoSuchStore,
                    /// The requesting component does not have access to the specified store
                    /// (which may or may not exist).
                    AccessDenied,
                    /// Some implementation-specific error has occurred (e.g. I/O)
                    Other(_rt::String),
                }
                impl ::core::fmt::Debug for Error {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Error::StoreTableFull => {
                                f.debug_tuple("Error::StoreTableFull").finish()
                            }
                            Error::NoSuchStore => f.debug_tuple("Error::NoSuchStore").finish(),
                            Error::AccessDenied => f.debug_tuple("Error::AccessDenied").finish(),
                            Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                        }
                    }
                }
                impl ::core::fmt::Display for Error {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }

                impl std::error::Error for Error {}
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_store_open_cabi<T: GuestStore>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::open(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::StoreTableFull => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::NoSuchStore => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::AccessDenied => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::Other(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2.add(12).cast::<usize>() = len3;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_static_store_open<T: GuestStore>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                1 => (),
                                2 => (),
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_store_get_cabi<T: GuestStore>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::get(
                        StoreBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2.add(12).cast::<usize>() = len3;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                None => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::StoreTableFull => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::NoSuchStore => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::AccessDenied => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::Other(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_store_get<T: GuestStore>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = i32::from(*arg0.add(4).cast::<u8>());
                            match l5 {
                                0 => (),
                                1 => (),
                                2 => (),
                                _ => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_store_set_cabi<T: GuestStore>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let result2 = T::set(
                        StoreBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(_) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::StoreTableFull => {
                                    *ptr3.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::NoSuchStore => {
                                    *ptr3.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::AccessDenied => {
                                    *ptr3.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::Other(e) => {
                                    *ptr3.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr3.add(12).cast::<usize>() = len4;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_store_set<T: GuestStore>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                1 => (),
                                2 => (),
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_store_delete_cabi<T: GuestStore>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::delete(
                        StoreBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::StoreTableFull => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::NoSuchStore => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::AccessDenied => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::Other(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2.add(12).cast::<usize>() = len3;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_store_delete<T: GuestStore>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                1 => (),
                                2 => (),
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_store_exists_cabi<T: GuestStore>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::exists(
                        StoreBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::StoreTableFull => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::NoSuchStore => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::AccessDenied => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::Other(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2.add(12).cast::<usize>() = len3;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_store_exists<T: GuestStore>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                1 => (),
                                2 => (),
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_store_get_keys_cabi<T: GuestStore>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    let result0 = T::get_keys(StoreBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = e;
                            let len3 = vec3.len();
                            let layout3 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 8, 4);
                            let result3 = if layout3.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout3);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec3.into_iter().enumerate() {
                                let base = result3.add(i * 8);
                                {
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *base.add(4).cast::<usize>() = len2;
                                    *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len3;
                            *ptr1.add(4).cast::<*mut u8>() = result3;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::StoreTableFull => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::NoSuchStore => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::AccessDenied => {
                                    *ptr1.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::Other(e) => {
                                    *ptr1.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr1.add(12).cast::<usize>() = len4;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_store_get_keys<T: GuestStore>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            let base5 = l3;
                            let len5 = l4;
                            for i in 0..len5 {
                                let base = base5.add(i * 8);
                                {
                                    let l1 = *base.add(0).cast::<*mut u8>();
                                    let l2 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                }
                            }
                            _rt::cabi_dealloc(base5, len5 * 8, 4);
                        }
                        _ => {
                            let l6 = i32::from(*arg0.add(4).cast::<u8>());
                            match l6 {
                                0 => (),
                                1 => (),
                                2 => (),
                                _ => {
                                    let l7 = *arg0.add(8).cast::<*mut u8>();
                                    let l8 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type Store: GuestStore;
                }
                pub trait GuestStore: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]fermyon:spin/key-value@2.0.0")]
                            extern "C" {
                                #[link_name = "[resource-new]store"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]fermyon:spin/key-value@2.0.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]store"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    /// Open the store with the specified label.
                    ///
                    /// `label` must refer to a store allowed in the spin.toml manifest.
                    ///
                    /// `error::no-such-store` will be raised if the `label` is not recognized.
                    fn open(label: _rt::String) -> Result<Store, Error>;
                    /// Get the value associated with the specified `key`
                    ///
                    /// Returns `ok(none)` if the key does not exist.
                    fn get(&self, key: _rt::String) -> Result<Option<_rt::Vec<u8>>, Error>;
                    /// Set the `value` associated with the specified `key` overwriting any existing value.
                    fn set(&self, key: _rt::String, value: _rt::Vec<u8>) -> Result<(), Error>;
                    /// Delete the tuple with the specified `key`
                    ///
                    /// No error is raised if a tuple did not previously exist for `key`.
                    fn delete(&self, key: _rt::String) -> Result<(), Error>;
                    /// Return whether a tuple exists for the specified `key`
                    fn exists(&self, key: _rt::String) -> Result<bool, Error>;
                    /// Return a list of all the keys
                    fn get_keys(&self) -> Result<_rt::Vec<_rt::String>, Error>;
                }
                #[doc(hidden)]

                macro_rules! __export_fermyon_spin_key_value_2_0_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "fermyon:spin/key-value@2.0.0#[static]store.open"]
    unsafe extern "C" fn export_static_store_open(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_static_store_open_cabi::<<$ty as $($path_to_types)*::Guest>::Store>(arg0, arg1)
    }
    #[export_name = "cabi_post_fermyon:spin/key-value@2.0.0#[static]store.open"]
    unsafe extern "C" fn _post_return_static_store_open(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_static_store_open::<<$ty as $($path_to_types)*::Guest>::Store>(arg0)
    }
    #[export_name = "fermyon:spin/key-value@2.0.0#[method]store.get"]
    unsafe extern "C" fn export_method_store_get(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_store_get_cabi::<<$ty as $($path_to_types)*::Guest>::Store>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_fermyon:spin/key-value@2.0.0#[method]store.get"]
    unsafe extern "C" fn _post_return_method_store_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_store_get::<<$ty as $($path_to_types)*::Guest>::Store>(arg0)
    }
    #[export_name = "fermyon:spin/key-value@2.0.0#[method]store.set"]
    unsafe extern "C" fn export_method_store_set(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_store_set_cabi::<<$ty as $($path_to_types)*::Guest>::Store>(arg0, arg1, arg2, arg3, arg4)
    }
    #[export_name = "cabi_post_fermyon:spin/key-value@2.0.0#[method]store.set"]
    unsafe extern "C" fn _post_return_method_store_set(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_store_set::<<$ty as $($path_to_types)*::Guest>::Store>(arg0)
    }
    #[export_name = "fermyon:spin/key-value@2.0.0#[method]store.delete"]
    unsafe extern "C" fn export_method_store_delete(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_store_delete_cabi::<<$ty as $($path_to_types)*::Guest>::Store>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_fermyon:spin/key-value@2.0.0#[method]store.delete"]
    unsafe extern "C" fn _post_return_method_store_delete(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_store_delete::<<$ty as $($path_to_types)*::Guest>::Store>(arg0)
    }
    #[export_name = "fermyon:spin/key-value@2.0.0#[method]store.exists"]
    unsafe extern "C" fn export_method_store_exists(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_store_exists_cabi::<<$ty as $($path_to_types)*::Guest>::Store>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_fermyon:spin/key-value@2.0.0#[method]store.exists"]
    unsafe extern "C" fn _post_return_method_store_exists(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_store_exists::<<$ty as $($path_to_types)*::Guest>::Store>(arg0)
    }
    #[export_name = "fermyon:spin/key-value@2.0.0#[method]store.get-keys"]
    unsafe extern "C" fn export_method_store_get_keys(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_store_get_keys_cabi::<<$ty as $($path_to_types)*::Guest>::Store>(arg0)
    }
    #[export_name = "cabi_post_fermyon:spin/key-value@2.0.0#[method]store.get-keys"]
    unsafe extern "C" fn _post_return_method_store_get_keys(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_store_get_keys::<<$ty as $($path_to_types)*::Guest>::Store>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_fermyon_spin_key_value_2_0_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_virtualized_component_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::fermyon::spin::key_value::__export_fermyon_spin_key_value_2_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::fermyon::spin::key_value);
  )
}
#[doc(inline)]
pub(crate) use __export_virtualized_component_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:virtualized-component:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 592] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc4\x03\x01A\x02\x01\
A\x02\x01B\x19\x04\0\x05store\x03\x01\x01q\x04\x10store-table-full\0\0\x0dno-suc\
h-store\0\0\x0daccess-denied\0\0\x05other\x01s\0\x04\0\x05error\x03\0\x01\x01i\0\
\x01j\x01\x03\x01\x02\x01@\x01\x05labels\0\x04\x04\0\x12[static]store.open\x01\x05\
\x01h\0\x01p}\x01k\x07\x01j\x01\x08\x01\x02\x01@\x02\x04self\x06\x03keys\0\x09\x04\
\0\x11[method]store.get\x01\x0a\x01j\0\x01\x02\x01@\x03\x04self\x06\x03keys\x05v\
alue\x07\0\x0b\x04\0\x11[method]store.set\x01\x0c\x01@\x02\x04self\x06\x03keys\0\
\x0b\x04\0\x14[method]store.delete\x01\x0d\x01j\x01\x7f\x01\x02\x01@\x02\x04self\
\x06\x03keys\0\x0e\x04\0\x14[method]store.exists\x01\x0f\x01ps\x01j\x01\x10\x01\x02\
\x01@\x01\x04self\x06\0\x11\x04\0\x16[method]store.get-keys\x01\x12\x04\x01\x1cf\
ermyon:spin/key-value@2.0.0\x05\0\x04\x01'fermyon:spin-virt/virtualized-componen\
t\x04\0\x0b\x1b\x01\0\x15virtualized-component\x03\0\0\0G\x09producers\x01\x0cpr\
ocessed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
